
Opdracht B.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b35  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000818  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000320  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001fc  00000000  00000000  00001b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000160  00000160  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000142  00000142  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    0000009e  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  74:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  7c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  80:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  84:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  88:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000142 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++) {
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	08 c0       	rjmp	.+16     	; 0x158 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	ef ec       	ldi	r30, 0xCF	; 207
 14a:	f7 e0       	ldi	r31, 0x07	; 7
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <wait+0xa>
 150:	00 c0       	rjmp	.+0      	; 0x152 <wait+0x10>
 152:	00 00       	nop
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	28 17       	cp	r18, r24
 15a:	39 07       	cpc	r19, r25
 15c:	ac f3       	brlt	.-22     	; 0x148 <wait+0x6>
		_delay_ms( 1 );        // library function (max 30 ms at 8MHz)
	}
}
 15e:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:

int main(void)
{
	DDRD = 0b11111111;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	
	int counter = 0;
	int isFast = 0;
	int isOn = 0;
	int isPressed = 0;
  a8:	e1 2c       	mov	r14, r1
  aa:	f1 2c       	mov	r15, r1
{
	DDRD = 0b11111111;
	
	int counter = 0;
	int isFast = 0;
	int isOn = 0;
  ac:	c1 2c       	mov	r12, r1
  ae:	d1 2c       	mov	r13, r1
int main(void)
{
	DDRD = 0b11111111;
	
	int counter = 0;
	int isFast = 0;
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	10 e0       	ldi	r17, 0x00	; 0

int main(void)
{
	DDRD = 0b11111111;
	
	int counter = 0;
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	d0 e0       	ldi	r29, 0x00	; 0
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <main+0x1c>
	int isPressed = 0;
	
    while(1)
    {
		wait(10);
		counter += 10;
  ba:	ec 01       	movw	r28, r24
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x1c>
  be:	ec 01       	movw	r28, r24
	int isOn = 0;
	int isPressed = 0;
	
    while(1)
    {
		wait(10);
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 a1 00 	call	0x142	; 0x142 <wait>
		counter += 10;
  c8:	ce 01       	movw	r24, r28
  ca:	0a 96       	adiw	r24, 0x0a	; 10
		
		if (PINC & 0x01)
  cc:	98 9b       	sbis	0x13, 0	; 19
  ce:	0b c0       	rjmp	.+22     	; 0xe6 <main+0x42>
		{
			if (isPressed == 0)
  d0:	e1 14       	cp	r14, r1
  d2:	f1 04       	cpc	r15, r1
  d4:	81 f4       	brne	.+32     	; 0xf6 <main+0x52>
			{
				isPressed = 1;
				if (isFast)
  d6:	01 2b       	or	r16, r17
  d8:	49 f0       	breq	.+18     	; 0xec <main+0x48>
		
		if (PINC & 0x01)
		{
			if (isPressed == 0)
			{
				isPressed = 1;
  da:	ee 24       	eor	r14, r14
  dc:	e3 94       	inc	r14
  de:	f1 2c       	mov	r15, r1
				if (isFast)
				{
					isFast = 0;
  e0:	00 e0       	ldi	r16, 0x00	; 0
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <main+0x52>
				} else {
					isFast = 1;
				}
			}
		} else {
			isPressed = 0;
  e6:	e1 2c       	mov	r14, r1
  e8:	f1 2c       	mov	r15, r1
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <main+0x52>
		
		if (PINC & 0x01)
		{
			if (isPressed == 0)
			{
				isPressed = 1;
  ec:	ee 24       	eor	r14, r14
  ee:	e3 94       	inc	r14
  f0:	f1 2c       	mov	r15, r1
				if (isFast)
				{
					isFast = 0;
				} else {
					isFast = 1;
  f2:	01 e0       	ldi	r16, 0x01	; 1
  f4:	10 e0       	ldi	r17, 0x00	; 0
			}
		} else {
			isPressed = 0;
		}
		
		if (isFast)
  f6:	01 15       	cp	r16, r1
  f8:	11 05       	cpc	r17, r1
  fa:	89 f0       	breq	.+34     	; 0x11e <main+0x7a>
		{
			if (counter >= 250)
  fc:	8a 3f       	cpi	r24, 0xFA	; 250
  fe:	91 05       	cpc	r25, r1
 100:	e4 f2       	brlt	.-72     	; 0xba <main+0x16>
			{
				if (isOn)
 102:	cd 28       	or	r12, r13
 104:	21 f0       	breq	.+8      	; 0x10e <main+0x6a>
				{
					isOn = 0;
					PORTD = 0x00;
 106:	12 ba       	out	0x12, r1	; 18
		{
			if (counter >= 250)
			{
				if (isOn)
				{
					isOn = 0;
 108:	c1 2c       	mov	r12, r1
 10a:	d1 2c       	mov	r13, r1
 10c:	05 c0       	rjmp	.+10     	; 0x118 <main+0x74>
					PORTD = 0x00;
				} else {
					isOn = 1;
					PORTD = 0x80;
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	82 bb       	out	0x12, r24	; 18
				if (isOn)
				{
					isOn = 0;
					PORTD = 0x00;
				} else {
					isOn = 1;
 112:	cc 24       	eor	r12, r12
 114:	c3 94       	inc	r12
 116:	d1 2c       	mov	r13, r1
					PORTD = 0x80;
				}
				counter -= 250;
 118:	c0 5f       	subi	r28, 0xF0	; 240
 11a:	d1 09       	sbc	r29, r1
 11c:	d1 cf       	rjmp	.-94     	; 0xc0 <main+0x1c>
			}
		} else {
			if (counter >= 1000)
 11e:	88 3e       	cpi	r24, 0xE8	; 232
 120:	23 e0       	ldi	r18, 0x03	; 3
 122:	92 07       	cpc	r25, r18
 124:	64 f2       	brlt	.-104    	; 0xbe <main+0x1a>
			{
				if (isOn)
 126:	cd 28       	or	r12, r13
 128:	21 f0       	breq	.+8      	; 0x132 <main+0x8e>
				{
					isOn = 0;
					PORTD = 0x00;
 12a:	12 ba       	out	0x12, r1	; 18
		} else {
			if (counter >= 1000)
			{
				if (isOn)
				{
					isOn = 0;
 12c:	c1 2c       	mov	r12, r1
 12e:	d1 2c       	mov	r13, r1
 130:	05 c0       	rjmp	.+10     	; 0x13c <main+0x98>
					PORTD = 0x00;
				} else {
					isOn = 1;
					PORTD = 0x80;
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	82 bb       	out	0x12, r24	; 18
				if (isOn)
				{
					isOn = 0;
					PORTD = 0x00;
				} else {
					isOn = 1;
 136:	cc 24       	eor	r12, r12
 138:	c3 94       	inc	r12
 13a:	d1 2c       	mov	r13, r1
					PORTD = 0x80;
				}
				counter -= 1000;
 13c:	ce 5d       	subi	r28, 0xDE	; 222
 13e:	d3 40       	sbci	r29, 0x03	; 3
 140:	bf cf       	rjmp	.-130    	; 0xc0 <main+0x1c>
