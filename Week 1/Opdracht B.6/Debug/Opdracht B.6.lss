
Opdracht B.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000179  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b0d  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000825  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a2  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  00001a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000f2  000000f2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000000d4  000000d4  00000128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000030  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  68:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  6c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  70:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  7c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  80:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  84:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  88:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000000d4 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++) {
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	08 c0       	rjmp	.+16     	; 0xea <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef ec       	ldi	r30, 0xCF	; 207
  dc:	f7 e0       	ldi	r31, 0x07	; 7
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <wait+0xa>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <wait+0x10>
  e4:	00 00       	nop
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	28 17       	cp	r18, r24
  ec:	39 07       	cpc	r19, r25
  ee:	ac f3       	brlt	.-22     	; 0xda <wait+0x6>
		_delay_ms( 1 );        // library function (max 30 ms at 8MHz)
	}
}
  f0:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:


int main(void)
{
	DDRD = 0b11111111;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	int i = 1000;
  a8:	c8 ee       	ldi	r28, 0xE8	; 232
  aa:	d3 e0       	ldi	r29, 0x03	; 3
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0xe>
		wait(i);
		if(PINC & 0x01){
			if(i == 1000){
				i = 4000;
			}else{
				i = 1000;
  ae:	c8 ee       	ldi	r28, 0xE8	; 232
  b0:	d3 e0       	ldi	r29, 0x03	; 3
{
	DDRD = 0b11111111;
	int i = 1000;
    while(1)
    {
		PORTD = 0x80;
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	82 bb       	out	0x12, r24	; 18
		wait(i);
  b6:	ce 01       	movw	r24, r28
  b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wait>
		PORTD = 0x00;
  bc:	12 ba       	out	0x12, r1	; 18
		wait(i);
  be:	ce 01       	movw	r24, r28
  c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wait>
		if(PINC & 0x01){
  c4:	98 9b       	sbis	0x13, 0	; 19
  c6:	f5 cf       	rjmp	.-22     	; 0xb2 <main+0xe>
			if(i == 1000){
  c8:	c8 3e       	cpi	r28, 0xE8	; 232
  ca:	d3 40       	sbci	r29, 0x03	; 3
  cc:	81 f7       	brne	.-32     	; 0xae <main+0xa>
				i = 4000;
  ce:	c0 ea       	ldi	r28, 0xA0	; 160
  d0:	df e0       	ldi	r29, 0x0F	; 15
  d2:	ef cf       	rjmp	.-34     	; 0xb2 <main+0xe>
