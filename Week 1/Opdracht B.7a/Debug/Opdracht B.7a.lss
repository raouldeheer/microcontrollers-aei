
Opdracht B.7a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000163  000001d7  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001d7  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c2a  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000899  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ff  00000000  00000000  00001719  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000094  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00001dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.s1      00000006  00000132  00000132  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.s2      00000006  00000138  00000138  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.s3      00000006  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start   00000006  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.end     00000006  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.wait    0000001e  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000028  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.pattern 0000000f  00800100  00000154  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
   8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
   c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  34:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  6c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  74:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  7c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  80:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  84:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  88:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 0f       	add	r16, r17
  90:	00 01       	movw	r0, r0
  92:	54 00       	.word	0x0054	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000150 <__bad_interrupt>:
 150:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.s1:

00000132 <s1>:

//
// State S1
//
void s1(void){
	PORTD = 0x20;
 132:	80 e2       	ldi	r24, 0x20	; 32
 134:	82 bb       	out	0x12, r24	; 18
 136:	08 95       	ret

Disassembly of section .text.s2:

00000138 <s2>:

//
// State S2
//
void s2(void){
	PORTD = 0x40;
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	08 95       	ret

Disassembly of section .text.s3:

0000013e <s3>:

//
// State S3
//
void s3(void){
	PORTD = 0x10;
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	82 bb       	out	0x12, r24	; 18
 142:	08 95       	ret

Disassembly of section .text.start:

00000144 <start>:

//
// State Start
//
void start(void){
	PORTD = 0x80;
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	82 bb       	out	0x12, r24	; 18
 148:	08 95       	ret

Disassembly of section .text.end:

0000014a <end>:

//
// State Stop
//
void end(void){
	PORTD = 0x08;
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	82 bb       	out	0x12, r24	; 18
 14e:	08 95       	ret

Disassembly of section .text.wait:

00000114 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++) {
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	08 c0       	rjmp	.+16     	; 0x12a <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	ef ec       	ldi	r30, 0xCF	; 207
 11c:	f7 e0       	ldi	r31, 0x07	; 7
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <wait+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <wait+0x10>
 124:	00 00       	nop
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	28 17       	cp	r18, r24
 12c:	39 07       	cpc	r19, r25
 12e:	ac f3       	brlt	.-22     	; 0x11a <wait+0x6>
		_delay_ms( 1 );        // library function (max 30 ms at 8MHz)
	}
}
 130:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:
};


int main(void)
{
	DDRD = 0b11111111;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	81 bb       	out	0x11, r24	; 17
	ENUM_STATES state = START;
  f0:	c0 e0       	ldi	r28, 0x00	; 0
    while(1)
    {
		wait(500);
  f2:	84 ef       	ldi	r24, 0xF4	; 244
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 8a 00 	call	0x114	; 0x114 <wait>
		pattern[state].state();
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	ce 01       	movw	r24, r28
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	c8 0f       	add	r28, r24
 104:	d9 1f       	adc	r29, r25
 106:	c0 50       	subi	r28, 0x00	; 0
 108:	df 4f       	sbci	r29, 0xFF	; 255
 10a:	e8 81       	ld	r30, Y
 10c:	f9 81       	ldd	r31, Y+1	; 0x01
 10e:	09 95       	icall
		state = pattern[state].nextState;
 110:	ca 81       	ldd	r28, Y+2	; 0x02
 112:	ef cf       	rjmp	.-34     	; 0xf2 <main+0x6>
