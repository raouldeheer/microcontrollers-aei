
Opdracht B.7a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000199  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b3c  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000830  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d8  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f1  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000112  00000112  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000000f4  000000f4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000050  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  68:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  6c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  70:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  74:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  7c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  80:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  84:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000112 <__bad_interrupt>:
 112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

000000f4 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++) {
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	08 c0       	rjmp	.+16     	; 0x10a <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	ef ec       	ldi	r30, 0xCF	; 207
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <wait+0xa>
 102:	00 c0       	rjmp	.+0      	; 0x104 <wait+0x10>
 104:	00 00       	nop
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	28 17       	cp	r18, r24
 10c:	39 07       	cpc	r19, r25
 10e:	ac f3       	brlt	.-22     	; 0xfa <wait+0x6>
		_delay_ms( 1 );        // library function (max 30 ms at 8MHz)
	}
}
 110:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:

typedef enum { START, S1, S2, S3, END } ENUM_STATES;

int main(void)
{
	DDRD = 0b11111111;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	ENUM_STATES state = START;
  a8:	c0 e0       	ldi	r28, 0x00	; 0
    while(1)
    {
		wait(500);
  aa:	84 ef       	ldi	r24, 0xF4	; 244
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	0e 94 7a 00 	call	0xf4	; 0xf4 <wait>
		switch (state)
  b2:	c2 30       	cpi	r28, 0x02	; 2
  b4:	99 f0       	breq	.+38     	; 0xdc <main+0x38>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <main+0x1e>
  b8:	cc 23       	and	r28, r28
  ba:	41 f0       	breq	.+16     	; 0xcc <main+0x28>
  bc:	c1 30       	cpi	r28, 0x01	; 1
  be:	51 f0       	breq	.+20     	; 0xd4 <main+0x30>
  c0:	f4 cf       	rjmp	.-24     	; 0xaa <main+0x6>
  c2:	c3 30       	cpi	r28, 0x03	; 3
  c4:	79 f0       	breq	.+30     	; 0xe4 <main+0x40>
  c6:	c4 30       	cpi	r28, 0x04	; 4
  c8:	89 f0       	breq	.+34     	; 0xec <main+0x48>
  ca:	ef cf       	rjmp	.-34     	; 0xaa <main+0x6>
		{
			case START:
				PORTD = 0x80;
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	82 bb       	out	0x12, r24	; 18
				state = S2;
  d0:	c2 e0       	ldi	r28, 0x02	; 2
				break;
  d2:	eb cf       	rjmp	.-42     	; 0xaa <main+0x6>
			case S1:
				PORTD = 0x20;
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	82 bb       	out	0x12, r24	; 18
				state = S3;
  d8:	c3 e0       	ldi	r28, 0x03	; 3
				break;
  da:	e7 cf       	rjmp	.-50     	; 0xaa <main+0x6>
			case S2:
				PORTD = 0x40;
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	82 bb       	out	0x12, r24	; 18
				state = S1;
  e0:	c1 e0       	ldi	r28, 0x01	; 1
				break;
  e2:	e3 cf       	rjmp	.-58     	; 0xaa <main+0x6>
			case S3:
				PORTD = 0x10;
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	82 bb       	out	0x12, r24	; 18
				state = END;
  e8:	c4 e0       	ldi	r28, 0x04	; 4
				break;
  ea:	df cf       	rjmp	.-66     	; 0xaa <main+0x6>
			case END:
				PORTD = 0x08;
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	82 bb       	out	0x12, r24	; 18
				state = START;
  f0:	c0 e0       	ldi	r28, 0x00	; 0
				break;
  f2:	db cf       	rjmp	.-74     	; 0xaa <main+0x6>
