
Opdracht 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000344  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  00000373  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001024  00000000  00000000  000003eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008ba  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004e5  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  000021b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000288  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000302  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  0000284a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002ec  000002ec  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000282  00000282  000002d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.spi_masterInit 00000016  000002b8  000002b8  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.spi_write 00000008  000002e4  000002e4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.spi_slaveSelect 00000018  000002a0  000002a0  000002f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_slaveDeSelect 00000016  000002ce  000002ce  00000322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.displayDriverInit 00000062  00000148  00000148  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spi_writeWord 00000026  0000025c  0000025c  000002b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.writeLedDisplay 000000a4  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000062  000001aa  000001aa  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc.div 00000028  0000020c  0000020c  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc.div 00000028  00000234  00000234  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
   8:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
   c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  10:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  14:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  18:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  1c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  20:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  24:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  28:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  2c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  30:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  34:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  38:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  3c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  40:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  44:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  48:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  4c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  50:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  54:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  58:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  5c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  60:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  64:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  68:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  6c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  70:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  74:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  78:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  7c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  80:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  84:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
  88:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000002ec <__bad_interrupt>:
 2ec:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000282 <wait>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	08 c0       	rjmp	.+16     	; 0x298 <wait+0x16>
 288:	ef ec       	ldi	r30, 0xCF	; 207
 28a:	f7 e0       	ldi	r31, 0x07	; 7
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <wait+0xa>
 290:	00 c0       	rjmp	.+0      	; 0x292 <wait+0x10>
 292:	00 00       	nop
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	28 17       	cp	r18, r24
 29a:	39 07       	cpc	r19, r25
 29c:	ac f3       	brlt	.-22     	; 0x288 <wait+0x6>
 29e:	08 95       	ret

Disassembly of section .text.spi_masterInit:

000002b8 <spi_masterInit>:
	}
}

void spi_masterInit(void)
{
	DDR_SPI = 0xff;							// All pins output: MOSI, SCK, SS, SS_display as output
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO);				// 	except: MISO input
 2bc:	87 b3       	in	r24, 0x17	; 23
 2be:	87 7f       	andi	r24, 0xF7	; 247
 2c0:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS);				// SS_ADC == 1: deselect slave
 2c2:	88 b3       	in	r24, 0x18	; 24
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);	// or: SPCR = 0b11010010;
 2c8:	82 e5       	ldi	r24, 0x52	; 82
 2ca:	8d b9       	out	0x0d, r24	; 13
 2cc:	08 95       	ret

Disassembly of section .text.spi_write:

000002e4 <spi_write>:


// Write a byte from master to slave
void spi_write( unsigned char data )
{
	SPDR = data;							// Load byte to Data register --> starts transmission
 2e4:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete
 2e6:	77 9b       	sbis	0x0e, 7	; 14
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <spi_write+0x2>
}
 2ea:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

000002a0 <spi_slaveSelect>:
}

// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber)
{
	PORTB &= ~BIT(chipNumber);
 2a0:	98 b3       	in	r25, 0x18	; 24
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <spi_slaveSelect+0xc>
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	8a 95       	dec	r24
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <spi_slaveSelect+0x8>
 2b0:	20 95       	com	r18
 2b2:	29 23       	and	r18, r25
 2b4:	28 bb       	out	0x18, r18	; 24
 2b6:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

000002ce <spi_slaveDeSelect>:

// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber)
{

	PORTB |= BIT(chipNumber);
 2ce:	98 b3       	in	r25, 0x18	; 24
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <spi_slaveDeSelect+0xc>
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	8a 95       	dec	r24
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <spi_slaveDeSelect+0x8>
 2de:	29 2b       	or	r18, r25
 2e0:	28 bb       	out	0x18, r18	; 24
 2e2:	08 95       	ret

Disassembly of section .text.displayDriverInit:

00000148 <displayDriverInit>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <spi_slaveSelect>
 14e:	89 e0       	ldi	r24, 0x09	; 9
 150:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 67 01 	call	0x2ce	; 0x2ce <spi_slaveDeSelect>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 50 01 	call	0x2a0	; 0x2a0 <spi_slaveSelect>
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 67 01 	call	0x2ce	; 0x2ce <spi_slaveDeSelect>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <spi_slaveSelect>
 17e:	8b e0       	ldi	r24, 0x0B	; 11
 180:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 67 01 	call	0x2ce	; 0x2ce <spi_slaveDeSelect>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 50 01 	call	0x2a0	; 0x2a0 <spi_slaveSelect>
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 67 01 	call	0x2ce	; 0x2ce <spi_slaveDeSelect>
 1a8:	08 95       	ret

Disassembly of section .text.spi_writeWord:

0000025c <spi_writeWord>:
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	d8 2f       	mov	r29, r24
 262:	c6 2f       	mov	r28, r22
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 50 01 	call	0x2a0	; 0x2a0 <spi_slaveSelect>
 26a:	8d 2f       	mov	r24, r29
 26c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 270:	8c 2f       	mov	r24, r28
 272:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_write>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 67 01 	call	0x2ce	; 0x2ce <spi_slaveDeSelect>
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

Disassembly of section .text.writeLedDisplay:

000000a4 <writeLedDisplay>:
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
  b6:	99 23       	and	r25, r25
  b8:	3c f4       	brge	.+14     	; 0xc8 <writeLedDisplay+0x24>
  ba:	d1 95       	neg	r29
  bc:	c1 95       	neg	r28
  be:	d1 09       	sbc	r29, r1
  c0:	ee 24       	eor	r14, r14
  c2:	e3 94       	inc	r14
  c4:	f1 2c       	mov	r15, r1
  c6:	02 c0       	rjmp	.+4      	; 0xcc <writeLedDisplay+0x28>
  c8:	e1 2c       	mov	r14, r1
  ca:	f1 2c       	mov	r15, r1
  cc:	0a e0       	ldi	r16, 0x0A	; 10
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	ce 01       	movw	r24, r28
  d2:	b8 01       	movw	r22, r16
  d4:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
  d8:	6b 01       	movw	r12, r22
  da:	68 2f       	mov	r22, r24
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 2e 01 	call	0x25c	; 0x25c <spi_writeWord>
  e2:	c6 01       	movw	r24, r12
  e4:	b8 01       	movw	r22, r16
  e6:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
  ea:	68 2f       	mov	r22, r24
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	0e 94 2e 01 	call	0x25c	; 0x25c <spi_writeWord>
  f2:	ce 01       	movw	r24, r28
  f4:	64 e6       	ldi	r22, 0x64	; 100
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
  fc:	cb 01       	movw	r24, r22
  fe:	b8 01       	movw	r22, r16
 100:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
 104:	68 2f       	mov	r22, r24
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 2e 01 	call	0x25c	; 0x25c <spi_writeWord>
 10c:	ce 01       	movw	r24, r28
 10e:	68 ee       	ldi	r22, 0xE8	; 232
 110:	73 e0       	ldi	r23, 0x03	; 3
 112:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
 116:	ef 28       	or	r14, r15
 118:	29 f0       	breq	.+10     	; 0x124 <writeLedDisplay+0x80>
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	0e 94 2e 01 	call	0x25c	; 0x25c <spi_writeWord>
 122:	09 c0       	rjmp	.+18     	; 0x136 <writeLedDisplay+0x92>
 124:	cb 01       	movw	r24, r22
 126:	6a e0       	ldi	r22, 0x0A	; 10
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
 12e:	68 2f       	mov	r22, r24
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	0e 94 2e 01 	call	0x25c	; 0x25c <spi_writeWord>
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	08 95       	ret

Disassembly of section .text.main:

000001aa <main>:
 1aa:	cf 93       	push	r28
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	87 bb       	out	0x17, r24	; 23
 1b0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <spi_masterInit>
 1b4:	0e 94 a4 00 	call	0x148	; 0x148 <displayDriverInit>
 1b8:	c1 e0       	ldi	r28, 0x01	; 1
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <main+0x1c>
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 2e 01 	call	0x25c	; 0x25c <spi_writeWord>
 1c4:	cf 5f       	subi	r28, 0xFF	; 255
 1c6:	c5 30       	cpi	r28, 0x05	; 5
 1c8:	c8 f3       	brcs	.-14     	; 0x1bc <main+0x12>
 1ca:	88 ee       	ldi	r24, 0xE8	; 232
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	0e 94 41 01 	call	0x282	; 0x282 <wait>
 1d2:	c1 e0       	ldi	r28, 0x01	; 1
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <main+0x3e>
 1d6:	6c 2f       	mov	r22, r28
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 2e 01 	call	0x25c	; 0x25c <spi_writeWord>
 1de:	88 ee       	ldi	r24, 0xE8	; 232
 1e0:	93 e0       	ldi	r25, 0x03	; 3
 1e2:	0e 94 41 01 	call	0x282	; 0x282 <wait>
 1e6:	cf 5f       	subi	r28, 0xFF	; 255
 1e8:	c5 30       	cpi	r28, 0x05	; 5
 1ea:	a8 f3       	brcs	.-22     	; 0x1d6 <main+0x2c>
 1ec:	88 ee       	ldi	r24, 0xE8	; 232
 1ee:	93 e0       	ldi	r25, 0x03	; 3
 1f0:	0e 94 41 01 	call	0x282	; 0x282 <wait>
 1f4:	85 e8       	ldi	r24, 0x85	; 133
 1f6:	9a e1       	ldi	r25, 0x1A	; 26
 1f8:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
 1fc:	8a e5       	ldi	r24, 0x5A	; 90
 1fe:	9d ef       	ldi	r25, 0xFD	; 253
 200:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000020c <__divmodhi4>:
 20c:	97 fb       	bst	r25, 7
 20e:	07 2e       	mov	r0, r23
 210:	16 f4       	brtc	.+4      	; 0x216 <__divmodhi4+0xa>
 212:	00 94       	com	r0
 214:	07 d0       	rcall	.+14     	; 0x224 <__divmodhi4_neg1>
 216:	77 fd       	sbrc	r23, 7
 218:	09 d0       	rcall	.+18     	; 0x22c <__divmodhi4_neg2>
 21a:	0e 94 1a 01 	call	0x234	; 0x234 <__udivmodhi4>
 21e:	07 fc       	sbrc	r0, 7
 220:	05 d0       	rcall	.+10     	; 0x22c <__divmodhi4_neg2>
 222:	3e f4       	brtc	.+14     	; 0x232 <__divmodhi4_exit>

00000224 <__divmodhi4_neg1>:
 224:	90 95       	com	r25
 226:	81 95       	neg	r24
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	08 95       	ret

0000022c <__divmodhi4_neg2>:
 22c:	70 95       	com	r23
 22e:	61 95       	neg	r22
 230:	7f 4f       	sbci	r23, 0xFF	; 255

00000232 <__divmodhi4_exit>:
 232:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000234 <__udivmodhi4>:
 234:	aa 1b       	sub	r26, r26
 236:	bb 1b       	sub	r27, r27
 238:	51 e1       	ldi	r21, 0x11	; 17
 23a:	07 c0       	rjmp	.+14     	; 0x24a <__udivmodhi4_ep>

0000023c <__udivmodhi4_loop>:
 23c:	aa 1f       	adc	r26, r26
 23e:	bb 1f       	adc	r27, r27
 240:	a6 17       	cp	r26, r22
 242:	b7 07       	cpc	r27, r23
 244:	10 f0       	brcs	.+4      	; 0x24a <__udivmodhi4_ep>
 246:	a6 1b       	sub	r26, r22
 248:	b7 0b       	sbc	r27, r23

0000024a <__udivmodhi4_ep>:
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	5a 95       	dec	r21
 250:	a9 f7       	brne	.-22     	; 0x23c <__udivmodhi4_loop>
 252:	80 95       	com	r24
 254:	90 95       	com	r25
 256:	bc 01       	movw	r22, r24
 258:	cd 01       	movw	r24, r26
 25a:	08 95       	ret
