
Opdracht B.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b61  00000000  00000000  00000213  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000830  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f6  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000152  00000000  00000000  00001b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000164  00000164  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000138  00000138  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000084  000000b4  000000b4  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data.Numbers 00000010  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.libgcc  0000000e  00000156  00000156  000001aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  68:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  6c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  70:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  74:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  78:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  7c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  80:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  84:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000138 <wait>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	08 c0       	rjmp	.+16     	; 0x14e <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	ef ec       	ldi	r30, 0xCF	; 207
 140:	f7 e0       	ldi	r31, 0x07	; 7
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <wait+0xa>
 146:	00 c0       	rjmp	.+0      	; 0x148 <wait+0x10>
 148:	00 00       	nop
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	28 17       	cp	r18, r24
 150:	39 07       	cpc	r19, r25
 152:	ac f3       	brlt	.-22     	; 0x13e <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 154:	08 95       	ret

Disassembly of section .text.main:

000000b4 <main>:


int main(void)
{
	int i = 0;
	DDRD = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
  b8:	14 ba       	out	0x14, r1	; 20
	
	int isPressed = 0;
	int isPressed1 = 0;
	int isPressed2 = 0;
  ba:	c1 2c       	mov	r12, r1
  bc:	d1 2c       	mov	r13, r1
	int i = 0;
	DDRD = 0xFF;
	DDRC = 0x00;
	
	int isPressed = 0;
	int isPressed1 = 0;
  be:	e1 2c       	mov	r14, r1
  c0:	f1 2c       	mov	r15, r1
{
	int i = 0;
	DDRD = 0xFF;
	DDRC = 0x00;
	
	int isPressed = 0;
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	10 e0       	ldi	r17, 0x00	; 0
};


int main(void)
{
	int i = 0;
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
	int isPressed = 0;
	int isPressed1 = 0;
	int isPressed2 = 0;
    while(1)
    {
		if (PINC & 0x01)
  ca:	98 9b       	sbis	0x13, 0	; 19
  cc:	07 c0       	rjmp	.+14     	; 0xdc <main+0x28>
		{
			if (isPressed == 0)
  ce:	01 15       	cp	r16, r1
  d0:	11 05       	cpc	r17, r1
  d2:	31 f4       	brne	.+12     	; 0xe0 <main+0x2c>
			{
				isPressed = 1;
				i++;
  d4:	21 96       	adiw	r28, 0x01	; 1
    {
		if (PINC & 0x01)
		{
			if (isPressed == 0)
			{
				isPressed = 1;
  d6:	01 e0       	ldi	r16, 0x01	; 1
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x2c>
				i++;
			}
			} else {
			isPressed = 0;
  dc:	00 e0       	ldi	r16, 0x00	; 0
  de:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (PINC & 0x02)
  e0:	99 9b       	sbis	0x13, 1	; 19
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <main+0x40>
		{
			if (isPressed1 == 0)
  e4:	e1 14       	cp	r14, r1
  e6:	f1 04       	cpc	r15, r1
  e8:	39 f4       	brne	.+14     	; 0xf8 <main+0x44>
			{
				isPressed1 = 1;
				i--;
  ea:	21 97       	sbiw	r28, 0x01	; 1
		}
		if (PINC & 0x02)
		{
			if (isPressed1 == 0)
			{
				isPressed1 = 1;
  ec:	ee 24       	eor	r14, r14
  ee:	e3 94       	inc	r14
  f0:	f1 2c       	mov	r15, r1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x44>
				i--;
			}
			} else {
			isPressed1 = 0;
  f4:	e1 2c       	mov	r14, r1
  f6:	f1 2c       	mov	r15, r1
		}
		if (PINC & 0x03)
  f8:	83 b3       	in	r24, 0x13	; 19
  fa:	83 70       	andi	r24, 0x03	; 3
  fc:	21 f0       	breq	.+8      	; 0x106 <main+0x52>
		{
			if (isPressed2 == 0)
  fe:	c1 14       	cp	r12, r1
 100:	d1 04       	cpc	r13, r1
 102:	21 f0       	breq	.+8      	; 0x10c <main+0x58>
 104:	08 c0       	rjmp	.+16     	; 0x116 <main+0x62>
			{
				isPressed2 = 1;
				i = 0;
			}
			} else {
			isPressed2 = 0;
 106:	c1 2c       	mov	r12, r1
 108:	d1 2c       	mov	r13, r1
 10a:	05 c0       	rjmp	.+10     	; 0x116 <main+0x62>
		}
		if (PINC & 0x03)
		{
			if (isPressed2 == 0)
			{
				isPressed2 = 1;
 10c:	cc 24       	eor	r12, r12
 10e:	c3 94       	inc	r12
 110:	d1 2c       	mov	r13, r1
				i = 0;
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
			}
			} else {
			isPressed2 = 0;
		}
		PORTD = Numbers[i];
 116:	ce 01       	movw	r24, r28
 118:	0d 2e       	mov	r0, r29
 11a:	00 0c       	add	r0, r0
 11c:	aa 0b       	sbc	r26, r26
 11e:	8c 55       	subi	r24, 0x5C	; 92
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	af 4f       	sbci	r26, 0xFF	; 255
 124:	fc 01       	movw	r30, r24
 126:	5a 2f       	mov	r21, r26
 128:	0e 94 ab 00 	call	0x156	; 0x156 <__xload_1>
 12c:	62 bb       	out	0x12, r22	; 18
		wait( 50 );
 12e:	82 e3       	ldi	r24, 0x32	; 50
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 9c 00 	call	0x138	; 0x138 <wait>
        //TODO:: Please write your application code 
    }
 136:	c9 cf       	rjmp	.-110    	; 0xca <main+0x16>

Disassembly of section .text.libgcc:

00000156 <__xload_1>:
 156:	57 fd       	sbrc	r21, 7
 158:	03 c0       	rjmp	.+6      	; 0x160 <__xload_1+0xa>
 15a:	5b bf       	out	0x3b, r21	; 59
 15c:	67 91       	elpm	r22, Z+
 15e:	08 95       	ret
 160:	60 81       	ld	r22, Z
 162:	08 95       	ret
