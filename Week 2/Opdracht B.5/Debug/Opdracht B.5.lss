
Opdracht B.5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000107d  00000000  00000000  00000313  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000098d  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004b1  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ec  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000295  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000234  00000000  00000000  00002551  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00002785  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000214  00000214  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000027e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  00000158  00000158  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init_4bits_mode 0000003e  0000011a  0000011a  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_data 00000024  0000017e  0000017e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_string 0000001a  000001e2  000001e2  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write_command 00000024  000001a2  000001a2  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.init    0000000a  000001fc  000001fc  00000250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.display_text 00000006  0000020e  0000020e  00000262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.set_cursor 00000008  00000206  00000206  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data 00000010  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .text.main    00000066  000000b4  000000b4  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc  0000001c  000001c6  000001c6  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

00000158 <lcd_strobe_lcd_e>:
void lcd_write_string(char *str);
void lcd_write_data(unsigned char byte);
void lcd_write_cmd(unsigned char byte);

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
 158:	85 b3       	in	r24, 0x15	; 21
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f ec       	ldi	r24, 0xCF	; 207
 160:	97 e0       	ldi	r25, 0x07	; 7
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_strobe_lcd_e+0xa>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_strobe_lcd_e+0x10>
 168:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	87 7f       	andi	r24, 0xF7	; 247
 16e:	85 bb       	out	0x15, r24	; 21
 170:	8f ec       	ldi	r24, 0xCF	; 207
 172:	97 e0       	ldi	r25, 0x07	; 7
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_strobe_lcd_e+0x1c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_strobe_lcd_e+0x22>
 17a:	00 00       	nop
 17c:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

0000011a <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
 11a:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 120:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 122:	c0 e2       	ldi	r28, 0x20	; 32
 124:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 126:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 12a:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 12c:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 134:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 138:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 13a:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 13e:	80 ef       	ldi	r24, 0xF0	; 240
 140:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 142:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 146:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 148:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 150:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>

}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

Disassembly of section .text.lcd_write_data:

0000017e <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 182:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 184:	85 b3       	in	r24, 0x15	; 21
 186:	84 60       	ori	r24, 0x04	; 4
 188:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 18a:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 18e:	c2 95       	swap	r28
 190:	c0 7f       	andi	r28, 0xF0	; 240
 192:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 194:	85 b3       	in	r24, 0x15	; 21
 196:	84 60       	ori	r24, 0x04	; 4
 198:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 19a:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

Disassembly of section .text.lcd_write_string:

000001e2 <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_string(char *str) {
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <lcd_write_string+0xe>
		lcd_write_data(*str);
 1ea:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	88 81       	ld	r24, Y
 1f2:	81 11       	cpse	r24, r1
 1f4:	fa cf       	rjmp	.-12     	; 0x1ea <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000001a2 <lcd_write_command>:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte)

{
 1a2:	cf 93       	push	r28
 1a4:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1a6:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1ae:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1b2:	c2 95       	swap	r28
 1b4:	c0 7f       	andi	r28, 0xF0	; 240
 1b6:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	8b 7f       	andi	r24, 0xFB	; 251
 1bc:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1be:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_strobe_lcd_e>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

Disassembly of section .text.init:

000001fc <init>:

/************************************************************************/
/* Init LCD module in 4 bits mode.                                      */
/************************************************************************/
void init() {
	DDRD = 0xFF;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	81 bb       	out	0x11, r24	; 17
	init_4bits_mode();
 200:	0e 94 8d 00 	call	0x11a	; 0x11a <init_4bits_mode>
 204:	08 95       	ret

Disassembly of section .text.display_text:

0000020e <display_text>:

/************************************************************************/
/* Writes 8 bits DATA to lcd                                            */
/************************************************************************/
void display_text(char *str) {
	lcd_write_string(str);
 20e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_write_string>
 212:	08 95       	ret

Disassembly of section .text.set_cursor:

00000206 <set_cursor>:

/************************************************************************/
/* Set position of cursor                                               */
/************************************************************************/
void set_cursor(int position) {
	lcd_write_command((position | (1<<7)));
 206:	80 68       	ori	r24, 0x80	; 128
 208:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_write_command>
 20c:	08 95       	ret

Disassembly of section .text.main:

000000b4 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

#include "lcd.h"

int main( void ) {
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	60 97       	sbiw	r28, 0x10	; 16
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	// Init LCD
	init();
  c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <init>

	// Write sample string
	char str[16] = "Yedi you are";
  cc:	24 ea       	ldi	r18, 0xA4	; 164
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	f9 01       	movw	r30, r18
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	74 2f       	mov	r23, r20
  dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__movmemx_qi>
  e0:	fe 01       	movw	r30, r28
  e2:	3e 96       	adiw	r30, 0x0e	; 14
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	df 01       	movw	r26, r30
  e8:	1d 92       	st	X+, r1
  ea:	8a 95       	dec	r24
  ec:	e9 f7       	brne	.-6      	; 0xe8 <main+0x34>
	display_text(str);
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 07 01 	call	0x20e	; 0x20e <display_text>

	set_cursor(2);
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 03 01 	call	0x206	; 0x206 <set_cursor>
	display_text(str);
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 07 01 	call	0x20e	; 0x20e <display_text>
 106:	bf e7       	ldi	r27, 0x7F	; 127
 108:	2a e1       	ldi	r18, 0x1A	; 26
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	b1 50       	subi	r27, 0x01	; 1
 10e:	20 40       	sbci	r18, 0x00	; 0
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x58>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x62>
 116:	00 00       	nop
 118:	f6 cf       	rjmp	.-20     	; 0x106 <main+0x52>

Disassembly of section .text.libgcc:

000001c6 <__movmemx_qi>:
 1c6:	99 27       	eor	r25, r25

000001c8 <__movmemx_hi>:
 1c8:	77 fd       	sbrc	r23, 7
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <__movmemx_hi+0x10>
 1cc:	7b bf       	out	0x3b, r23	; 59
 1ce:	07 90       	elpm	r0, Z+
 1d0:	0d 92       	st	X+, r0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <__movmemx_hi+0x6>
 1d6:	08 95       	ret
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <__movmemx_hi+0x10>
 1e0:	08 95       	ret
