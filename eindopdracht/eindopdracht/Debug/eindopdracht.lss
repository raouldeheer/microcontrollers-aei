
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000297  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e49  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000871  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f6  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000136  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000210  00000210  00000264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000221c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.twi_init 0000000c  000001fc  000001fc  00000250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.twi_start 00000010  000001ec  000001ec  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_stop 00000008  00000208  00000208  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_tx  00000014  000001d8  000001d8  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.wait    0000001e  000001ba  000001ba  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.send_byte 00000028  00000192  00000192  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    000000ee  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  50:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  80:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  84:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000210 <__bad_interrupt>:
 210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.twi_init:

000001fc <twi_init>:
#include <avr/io.h>
#include <util/delay.h>

void twi_init(void)
{
	TWSR = 0;
 1fc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 200:	80 e2       	ldi	r24, 0x20	; 32
 202:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 206:	08 95       	ret

Disassembly of section .text.twi_start:

000001ec <twi_start>:
}

void twi_start(void)
{
	TWCR = (0x80 | 0x20 | 0x04);
 1ec:	84 ea       	ldi	r24, 0xA4	; 164
 1ee:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 1f2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1f6:	88 23       	and	r24, r24
 1f8:	e4 f7       	brge	.-8      	; 0x1f2 <twi_start+0x6>
}
 1fa:	08 95       	ret

Disassembly of section .text.twi_stop:

00000208 <twi_stop>:

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 208:	84 e9       	ldi	r24, 0x94	; 148
 20a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 20e:	08 95       	ret

Disassembly of section .text.twi_tx:

000001d8 <twi_tx>:
}

void twi_tx(unsigned char data)
{
	TWDR = data;
 1d8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 1dc:	84 e8       	ldi	r24, 0x84	; 132
 1de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 1e2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1e6:	88 23       	and	r24, r24
 1e8:	e4 f7       	brge	.-8      	; 0x1e2 <twi_tx+0xa>
}
 1ea:	08 95       	ret

Disassembly of section .text.wait:

000001ba <wait>:

#define BIT(x)			(1 << (x))

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	ef ec       	ldi	r30, 0xCF	; 207
 1c2:	f7 e0       	ldi	r31, 0x07	; 7
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <wait+0xa>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <wait+0x10>
 1ca:	00 00       	nop
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	28 17       	cp	r18, r24
 1d2:	39 07       	cpc	r19, r25
 1d4:	ac f3       	brlt	.-22     	; 0x1c0 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1d6:	08 95       	ret

Disassembly of section .text.send_byte:

00000192 <send_byte>:

void send_byte(int addr, int data) {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	d8 2f       	mov	r29, r24
 198:	c6 2f       	mov	r28, r22
	twi_start();
 19a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 19e:	80 ee       	ldi	r24, 0xE0	; 224
 1a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_tx(addr);	// Address
 1a4:	8d 2f       	mov	r24, r29
 1a6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_tx(data);	// data
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_stop();
 1b0:	0e 94 04 01 	call	0x208	; 0x208 <twi_stop>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:

int main( void )
{
	
	twi_init();		// Init TWI interface
  a4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
  a8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
  ac:	80 ee       	ldi	r24, 0xE0	; 224
  ae:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
  b2:	81 e2       	ldi	r24, 0x21	; 33
  b4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_stop();
  b8:	0e 94 04 01 	call	0x208	; 0x208 <twi_stop>

	twi_start();
  bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  c0:	80 ee       	ldi	r24, 0xE0	; 224
  c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
  c6:	80 ea       	ldi	r24, 0xA0	; 160
  c8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_stop();
  cc:	0e 94 04 01 	call	0x208	; 0x208 <twi_stop>

	twi_start();
  d0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  d4:	80 ee       	ldi	r24, 0xE0	; 224
  d6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
  da:	83 ee       	ldi	r24, 0xE3	; 227
  dc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_stop();
  e0:	0e 94 04 01 	call	0x208	; 0x208 <twi_stop>

	twi_start();
  e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  e8:	80 ee       	ldi	r24, 0xE0	; 224
  ea:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
  ee:	81 e8       	ldi	r24, 0x81	; 129
  f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <twi_tx>
	twi_stop();
  f4:	0e 94 04 01 	call	0x208	; 0x208 <twi_stop>
	
	send_byte(0x00, 0x00);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>
	send_byte(0x02, 0x00);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>
	send_byte(0x04, 0x00);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>
	send_byte(0x06, 0x00);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>
	send_byte(0x08, 0x00);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>
	send_byte(0x0a, 0x00);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>
	send_byte(0x0c, 0x00);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>
	send_byte(0x0e, 0x00);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>

	int bytecode = 0x01;
	TCCR1B = 0b00000101;		// Initialize T2: timer, prescaler=1024, compare output disconnected,CTC,RUN
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	8e bd       	out	0x2e, r24	; 46
	send_byte(0x08, 0x00);
	send_byte(0x0a, 0x00);
	send_byte(0x0c, 0x00);
	send_byte(0x0e, 0x00);

	int bytecode = 0x01;
 15c:	c1 e0       	ldi	r28, 0x01	; 1
 15e:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR1B = 0b00000101;		// Initialize T2: timer, prescaler=1024, compare output disconnected,CTC,RUN
	
	while (1)
	{
		// 0x3D
		if (TCNT1 >= 15625) {
 160:	8c b5       	in	r24, 0x2c	; 44
 162:	9d b5       	in	r25, 0x2d	; 45
 164:	89 30       	cpi	r24, 0x09	; 9
 166:	9d 43       	sbci	r25, 0x3D	; 61
 168:	50 f0       	brcs	.+20     	; 0x17e <main+0xda>
			TCNT1 = 0;
 16a:	1d bc       	out	0x2d, r1	; 45
 16c:	1c bc       	out	0x2c, r1	; 44
			if (bytecode == 0x40)
 16e:	c0 34       	cpi	r28, 0x40	; 64
 170:	d1 05       	cpc	r29, r1
 172:	19 f0       	breq	.+6      	; 0x17a <main+0xd6>
			{
				bytecode = 0x01;
			}
			else
			{
				bytecode = bytecode << 1;
 174:	cc 0f       	add	r28, r28
 176:	dd 1f       	adc	r29, r29
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0xda>
		// 0x3D
		if (TCNT1 >= 15625) {
			TCNT1 = 0;
			if (bytecode == 0x40)
			{
				bytecode = 0x01;
 17a:	c1 e0       	ldi	r28, 0x01	; 1
 17c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				bytecode = bytecode << 1;
			}
		}
		
		send_byte(0x00, bytecode);
 17e:	be 01       	movw	r22, r28
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 c9 00 	call	0x192	; 0x192 <send_byte>
		
		
		
		
		wait(50);
 188:	82 e3       	ldi	r24, 0x32	; 50
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <wait>
		//send_byte(0x04, 0xff);
		//send_byte(0x05, 0xff);

		wait(500);
		*/
	}
 190:	e7 cf       	rjmp	.-50     	; 0x160 <main+0xbc>
