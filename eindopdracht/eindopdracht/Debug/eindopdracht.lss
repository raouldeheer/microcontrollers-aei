
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000014f4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  000014f4  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025ad  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a37  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000103d  00000000  00000000  000046d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  00005710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a8  00000000  00000000  00005b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001219  00000000  00000000  00005dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00007005  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000012e0  000012e0  000013b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000071b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.twi_init 0000000c  000012cc  000012cc  000013a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_start 00000010  0000129c  0000129c  00001370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_stop 00000008  000012d8  000012d8  000013ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.twi_tx  00000014  00001288  00001288  0000135c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.wait    0000001e  00001236  00001236  0000130a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.send_byte 00000028  00000dda  00000dda  00000eae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.setValueInValues 00000028  00000e02  00000e02  00000ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.getValueInValues 00000028  00000e2a  00000e2a  00000efe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.value_to_display 000000a2  0000099c  0000099c  00000a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.checkSingleBlock 00000032  00000d7a  00000d7a  00000e4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.checkNextMove 000000a6  000008f6  000008f6  000009ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.checkFullLine 00000098  00000a3e  00000a3e  00000b12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.checkEmptyLine 000000c4  00000782  00000782  00000856  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.clearLine 0000003a  00000d40  00000d40  00000e14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.clearAndMoveLine 00000064  00000b4c  00000b4c  00000c20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.drawShape 00000076  00000ad6  00000ad6  00000baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.wallCheckRight 00000054  00000bb0  00000bb0  00000c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.wallCheckLeft 00000050  00000cac  00000cac  00000d80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.wallCheckRightTurn 00000054  00000c04  00000c04  00000cd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.wallCheckLeftTurn 00000054  00000c58  00000c58  00000d2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .rodata       00000138  00800112  000012e4  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .text.main    00000686  000000fc  000000fc  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .bss.liveValues 00000080  0080024a  0080024a  000014f4  2**0
                  ALLOC
 37 .bss.values   00000080  008002ca  008002ca  000014f4  2**0
                  ALLOC
 38 .text.makeShapeO 00000024  00000f42  00000f42  00001016  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.makeShapeI2 00000028  00000e52  00000e52  00000f26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.makeShapeI1 00000028  00000e7a  00000e7a  00000f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.makeShapeI4 00000028  00000ea2  00000ea2  00000f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.makeShapeI3 00000028  00000eca  00000eca  00000f9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.makeShapeT1 00000024  00000f66  00000f66  0000103a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.makeShapeT2 00000024  00000f8a  00000f8a  0000105e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.makeShapeT3 00000024  00000fae  00000fae  00001082  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.makeShapeT4 00000024  00000fd2  00000fd2  000010a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.makeShapeS1 00000024  00000ff6  00000ff6  000010ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.makeShapeS2 00000024  0000101a  0000101a  000010ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.makeShapeS3 00000024  0000103e  0000103e  00001112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.makeShapeS4 00000024  00001062  00001062  00001136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.makeShapeZ1 00000024  00001086  00001086  0000115a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.makeShapeZ2 00000024  000010aa  000010aa  0000117e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.makeShapeZ3 00000024  000010ce  000010ce  000011a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.makeShapeZ4 00000024  000010f2  000010f2  000011c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.makeShapeJ1 00000024  00001116  00001116  000011ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.makeShapeJ2 00000024  0000113a  0000113a  0000120e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.makeShapeJ3 00000024  0000115e  0000115e  00001232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.makeShapeJ4 00000024  00001182  00001182  00001256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.makeShapeL1 00000024  000011a6  000011a6  0000127a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.makeShapeL2 00000024  000011ca  000011ca  0000129e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.makeShapeL3 00000024  000011ee  000011ee  000012c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.makeShapeL4 00000024  00001212  00001212  000012e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.libgcc.div 00000028  00000ef2  00000ef2  00000fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc.div 00000028  00000f1a  00000f1a  00000fee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .data         00000004  0080034a  0000141c  000014f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 66 .text.avrlibc 000000b0  00000846  00000846  0000091a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.libgcc.div 0000002e  00000dac  00000dac  00000e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.libgcc.div 00000010  000012ac  000012ac  00001380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.libgcc.mul 00000016  00001272  00001272  00001346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.libgcc.mul 00000010  000012bc  000012bc  00001390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.libgcc.div 00000044  00000cfc  00000cfc  00000dd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.libgcc.mul 0000001e  00001254  00001254  00001328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
   8:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
   c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  10:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  14:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  18:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  1c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  20:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  24:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  28:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  2c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  30:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  34:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  38:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  3c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  40:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  44:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  48:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  4c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  50:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  54:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  58:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  5c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  60:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  64:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  68:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  6c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  70:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  74:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  78:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  7c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  80:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  84:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>
  88:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 12       	cpse	r0, r17
  90:	80 01       	movw	r16, r0
  92:	12 02       	muls	r17, r18
  94:	4a 00       	.word	0x004a	; ????
  96:	12 e4       	ldi	r17, 0x42	; 66
  98:	02 4a       	sbci	r16, 0xA2	; 162
  9a:	03 4a       	sbci	r16, 0xA3	; 163
  9c:	80 03       	fmuls	r16, r16
  9e:	4a 03       	fmul	r20, r18
  a0:	4e 00       	.word	0x004e	; ????
  a2:	14 1c       	adc	r1, r4

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d0 e1       	ldi	r29, 0x10	; 16
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	ec e8       	ldi	r30, 0x8C	; 140
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	19 c0       	rjmp	.+50     	; 0xea <__do_clear_bss+0x8>
  b8:	b7 91       	elpm	r27, Z+
  ba:	a7 91       	elpm	r26, Z+
  bc:	37 91       	elpm	r19, Z+
  be:	27 91       	elpm	r18, Z+
  c0:	07 91       	elpm	r16, Z+
  c2:	07 fd       	sbrc	r16, 7
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <__do_clear_bss>
  c6:	97 91       	elpm	r25, Z+
  c8:	87 91       	elpm	r24, Z+
  ca:	ef 01       	movw	r28, r30
  cc:	f9 2f       	mov	r31, r25
  ce:	e8 2f       	mov	r30, r24
  d0:	0b bf       	out	0x3b, r16	; 59
  d2:	07 90       	elpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a2 17       	cp	r26, r18
  d8:	b3 07       	cpc	r27, r19
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0x22>
  dc:	fe 01       	movw	r30, r28
  de:	1b be       	out	0x3b, r1	; 59
  e0:	04 c0       	rjmp	.+8      	; 0xea <__do_clear_bss+0x8>

000000e2 <__do_clear_bss>:
  e2:	1d 92       	st	X+, r1
  e4:	a2 17       	cp	r26, r18
  e6:	b3 07       	cpc	r27, r19
  e8:	e1 f7       	brne	.-8      	; 0xe2 <__do_clear_bss>
  ea:	e4 3a       	cpi	r30, 0xA4	; 164
  ec:	f4 07       	cpc	r31, r20
  ee:	21 f7       	brne	.-56     	; 0xb8 <__do_copy_data+0x8>
  f0:	0e 94 7e 00 	call	0xfc	; 0xfc <_etext>
  f4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>

Disassembly of section .text:

000012e0 <__bad_interrupt>:
    12e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.twi_init:

000012cc <twi_init>:
#include <time.h>
#include "shapes.h"

void twi_init(void)
{
	TWSR = 0;
    12cc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
    12d0:	80 e2       	ldi	r24, 0x20	; 32
    12d2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    12d6:	08 95       	ret

Disassembly of section .text.twi_start:

0000129c <twi_start>:
}

void twi_start(void)
{
	TWCR = (0x80 | 0x20 | 0x04);
    129c:	84 ea       	ldi	r24, 0xA4	; 164
    129e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
    12a2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    12a6:	88 23       	and	r24, r24
    12a8:	e4 f7       	brge	.-8      	; 0x12a2 <twi_start+0x6>
}
    12aa:	08 95       	ret

Disassembly of section .text.twi_stop:

000012d8 <twi_stop>:

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
    12d8:	84 e9       	ldi	r24, 0x94	; 148
    12da:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    12de:	08 95       	ret

Disassembly of section .text.twi_tx:

00001288 <twi_tx>:
}

void twi_tx(unsigned char data)
{
	TWDR = data;
    1288:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
    128c:	84 e8       	ldi	r24, 0x84	; 132
    128e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
    1292:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1296:	88 23       	and	r24, r24
    1298:	e4 f7       	brge	.-8      	; 0x1292 <twi_tx+0xa>
}
    129a:	08 95       	ret

Disassembly of section .text.wait:

00001236 <wait>:

#define BIT(x)			(1 << (x))

void wait( int ms )
{
	for (int i=0; i<ms; i++)
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	08 c0       	rjmp	.+16     	; 0x124c <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    123c:	ef ec       	ldi	r30, 0xCF	; 207
    123e:	f7 e0       	ldi	r31, 0x07	; 7
    1240:	31 97       	sbiw	r30, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <wait+0xa>
    1244:	00 c0       	rjmp	.+0      	; 0x1246 <wait+0x10>
    1246:	00 00       	nop
    1248:	2f 5f       	subi	r18, 0xFF	; 255
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	28 17       	cp	r18, r24
    124e:	39 07       	cpc	r19, r25
    1250:	ac f3       	brlt	.-22     	; 0x123c <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
    1252:	08 95       	ret

Disassembly of section .text.send_byte:

00000dda <send_byte>:

void send_byte(int addr, int data) {
 dda:	cf 93       	push	r28
 ddc:	df 93       	push	r29
 dde:	d8 2f       	mov	r29, r24
 de0:	c6 2f       	mov	r28, r22
	twi_start();
 de2:	0e 94 4e 09 	call	0x129c	; 0x129c <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 de6:	80 ee       	ldi	r24, 0xE0	; 224
 de8:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_tx(addr);	// Address
 dec:	8d 2f       	mov	r24, r29
 dee:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_tx(data);	// data
 df2:	8c 2f       	mov	r24, r28
 df4:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_stop();
 df8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <twi_stop>
}
 dfc:	df 91       	pop	r29
 dfe:	cf 91       	pop	r28
 e00:	08 95       	ret

Disassembly of section .text.setValueInValues:

00000e02 <setValueInValues>:

void setValueInValues(int values[64], int x, int y, int v)
{
	values[(x-1) + ((y-1)*8)] = v;
 e02:	61 50       	subi	r22, 0x01	; 1
 e04:	71 09       	sbc	r23, r1
 e06:	41 50       	subi	r20, 0x01	; 1
 e08:	51 09       	sbc	r21, r1
 e0a:	44 0f       	add	r20, r20
 e0c:	55 1f       	adc	r21, r21
 e0e:	44 0f       	add	r20, r20
 e10:	55 1f       	adc	r21, r21
 e12:	44 0f       	add	r20, r20
 e14:	55 1f       	adc	r21, r21
 e16:	46 0f       	add	r20, r22
 e18:	57 1f       	adc	r21, r23
 e1a:	44 0f       	add	r20, r20
 e1c:	55 1f       	adc	r21, r21
 e1e:	84 0f       	add	r24, r20
 e20:	95 1f       	adc	r25, r21
 e22:	fc 01       	movw	r30, r24
 e24:	31 83       	std	Z+1, r19	; 0x01
 e26:	20 83       	st	Z, r18
 e28:	08 95       	ret

Disassembly of section .text.getValueInValues:

00000e2a <getValueInValues>:
}

int getValueInValues(int values[64], int x, int y)
{
	return values[(x-1) + ((y-1)*8)];
 e2a:	61 50       	subi	r22, 0x01	; 1
 e2c:	71 09       	sbc	r23, r1
 e2e:	41 50       	subi	r20, 0x01	; 1
 e30:	51 09       	sbc	r21, r1
 e32:	44 0f       	add	r20, r20
 e34:	55 1f       	adc	r21, r21
 e36:	44 0f       	add	r20, r20
 e38:	55 1f       	adc	r21, r21
 e3a:	44 0f       	add	r20, r20
 e3c:	55 1f       	adc	r21, r21
 e3e:	64 0f       	add	r22, r20
 e40:	75 1f       	adc	r23, r21
 e42:	66 0f       	add	r22, r22
 e44:	77 1f       	adc	r23, r23
 e46:	86 0f       	add	r24, r22
 e48:	97 1f       	adc	r25, r23
}
 e4a:	fc 01       	movw	r30, r24
 e4c:	80 81       	ld	r24, Z
 e4e:	91 81       	ldd	r25, Z+1	; 0x01
 e50:	08 95       	ret

Disassembly of section .text.value_to_display:

0000099c <value_to_display>:

void value_to_display(int values[64]) 
{
 99c:	0f 93       	push	r16
 99e:	1f 93       	push	r17
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	8c 01       	movw	r16, r24
	for (int i = 0; i<8; i++)
 9a6:	c0 e0       	ldi	r28, 0x00	; 0
 9a8:	d0 e0       	ldi	r29, 0x00	; 0
 9aa:	41 c0       	rjmp	.+130    	; 0xa2e <value_to_display+0x92>
	{
		int byteToPrint = 0;
		for (int j = 0; j<8; j++)
		{
			if (j == 0)
 9ac:	00 97       	sbiw	r24, 0x00	; 0
 9ae:	b9 f4       	brne	.+46     	; 0x9de <value_to_display+0x42>
			{
			byteToPrint |= (values[j + (i*8)] << 7);
 9b0:	fe 01       	movw	r30, r28
 9b2:	ee 0f       	add	r30, r30
 9b4:	ff 1f       	adc	r31, r31
 9b6:	ee 0f       	add	r30, r30
 9b8:	ff 1f       	adc	r31, r31
 9ba:	ee 0f       	add	r30, r30
 9bc:	ff 1f       	adc	r31, r31
 9be:	e8 0f       	add	r30, r24
 9c0:	f9 1f       	adc	r31, r25
 9c2:	ee 0f       	add	r30, r30
 9c4:	ff 1f       	adc	r31, r31
 9c6:	e0 0f       	add	r30, r16
 9c8:	f1 1f       	adc	r31, r17
 9ca:	20 81       	ld	r18, Z
 9cc:	31 81       	ldd	r19, Z+1	; 0x01
 9ce:	36 95       	lsr	r19
 9d0:	32 2f       	mov	r19, r18
 9d2:	22 27       	eor	r18, r18
 9d4:	37 95       	ror	r19
 9d6:	27 95       	ror	r18
 9d8:	62 2b       	or	r22, r18
 9da:	73 2b       	or	r23, r19
 9dc:	19 c0       	rjmp	.+50     	; 0xa10 <value_to_display+0x74>
			} 
			else 
			{
			byteToPrint |= (values[j + (i*8)] << (j-1));
 9de:	fe 01       	movw	r30, r28
 9e0:	ee 0f       	add	r30, r30
 9e2:	ff 1f       	adc	r31, r31
 9e4:	ee 0f       	add	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	ee 0f       	add	r30, r30
 9ea:	ff 1f       	adc	r31, r31
 9ec:	e8 0f       	add	r30, r24
 9ee:	f9 1f       	adc	r31, r25
 9f0:	ee 0f       	add	r30, r30
 9f2:	ff 1f       	adc	r31, r31
 9f4:	e0 0f       	add	r30, r16
 9f6:	f1 1f       	adc	r31, r17
 9f8:	20 81       	ld	r18, Z
 9fa:	31 81       	ldd	r19, Z+1	; 0x01
 9fc:	ac 01       	movw	r20, r24
 9fe:	41 50       	subi	r20, 0x01	; 1
 a00:	51 09       	sbc	r21, r1
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <value_to_display+0x6c>
 a04:	22 0f       	add	r18, r18
 a06:	33 1f       	adc	r19, r19
 a08:	4a 95       	dec	r20
 a0a:	e2 f7       	brpl	.-8      	; 0xa04 <value_to_display+0x68>
 a0c:	62 2b       	or	r22, r18
 a0e:	73 2b       	or	r23, r19
void value_to_display(int values[64]) 
{
	for (int i = 0; i<8; i++)
	{
		int byteToPrint = 0;
		for (int j = 0; j<8; j++)
 a10:	01 96       	adiw	r24, 0x01	; 1
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <value_to_display+0x80>
 a14:	80 e0       	ldi	r24, 0x00	; 0
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	70 e0       	ldi	r23, 0x00	; 0
 a1c:	88 30       	cpi	r24, 0x08	; 8
 a1e:	91 05       	cpc	r25, r1
 a20:	2c f2       	brlt	.-118    	; 0x9ac <value_to_display+0x10>
			else 
			{
			byteToPrint |= (values[j + (i*8)] << (j-1));
			}
		}
		send_byte(i*2, byteToPrint);
 a22:	ce 01       	movw	r24, r28
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>
	return values[(x-1) + ((y-1)*8)];
}

void value_to_display(int values[64]) 
{
	for (int i = 0; i<8; i++)
 a2c:	21 96       	adiw	r28, 0x01	; 1
 a2e:	c8 30       	cpi	r28, 0x08	; 8
 a30:	d1 05       	cpc	r29, r1
 a32:	84 f3       	brlt	.-32     	; 0xa14 <value_to_display+0x78>
			byteToPrint |= (values[j + (i*8)] << (j-1));
			}
		}
		send_byte(i*2, byteToPrint);
	}
}
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	08 95       	ret

Disassembly of section .text.checkSingleBlock:

00000d7a <checkSingleBlock>:

int checkSingleBlock(int values[64], int x, int y, POS checkOffset)
{
 d7a:	0f 93       	push	r16
 d7c:	1f 93       	push	r17
 d7e:	cf 93       	push	r28
 d80:	df 93       	push	r29
 d82:	ea 01       	movw	r28, r20
	if (getValueInValues(values, x + checkOffset.x, y+checkOffset.y) || y>8)
 d84:	42 0f       	add	r20, r18
 d86:	53 1f       	adc	r21, r19
 d88:	60 0f       	add	r22, r16
 d8a:	71 1f       	adc	r23, r17
 d8c:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	29 f4       	brne	.+10     	; 0xd9e <checkSingleBlock+0x24>
 d94:	29 97       	sbiw	r28, 0x09	; 9
 d96:	2c f0       	brlt	.+10     	; 0xda2 <checkSingleBlock+0x28>
	{
		return 1;
 d98:	81 e0       	ldi	r24, 0x01	; 1
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	02 c0       	rjmp	.+4      	; 0xda2 <checkSingleBlock+0x28>
 d9e:	81 e0       	ldi	r24, 0x01	; 1
 da0:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 da2:	df 91       	pop	r29
 da4:	cf 91       	pop	r28
 da6:	1f 91       	pop	r17
 da8:	0f 91       	pop	r16
 daa:	08 95       	ret

Disassembly of section .text.checkNextMove:

000008f6 <checkNextMove>:

int checkNextMove(int values[64], POS block[4], POS checkOffset)
{
 8f6:	2f 92       	push	r2
 8f8:	3f 92       	push	r3
 8fa:	4f 92       	push	r4
 8fc:	5f 92       	push	r5
 8fe:	6f 92       	push	r6
 900:	7f 92       	push	r7
 902:	8f 92       	push	r8
 904:	9f 92       	push	r9
 906:	af 92       	push	r10
 908:	bf 92       	push	r11
 90a:	cf 92       	push	r12
 90c:	df 92       	push	r13
 90e:	ef 92       	push	r14
 910:	ff 92       	push	r15
 912:	0f 93       	push	r16
 914:	1f 93       	push	r17
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	1c 01       	movw	r2, r24
 91c:	6b 01       	movw	r12, r22
 91e:	29 01       	movw	r4, r18
 920:	3a 01       	movw	r6, r20
	int result = checkSingleBlock(values, block[0].x, block[0].y, checkOffset);
 922:	fb 01       	movw	r30, r22
 924:	82 80       	ldd	r8, Z+2	; 0x02
 926:	93 80       	ldd	r9, Z+3	; 0x03
 928:	a0 80       	ld	r10, Z
 92a:	b1 80       	ldd	r11, Z+1	; 0x01
 92c:	89 01       	movw	r16, r18
 92e:	9a 01       	movw	r18, r20
 930:	a4 01       	movw	r20, r8
 932:	b5 01       	movw	r22, r10
 934:	0e 94 bd 06 	call	0xd7a	; 0xd7a <checkSingleBlock>
 938:	7c 01       	movw	r14, r24
	for (int i = 1; i<4; i++)
 93a:	c1 e0       	ldi	r28, 0x01	; 1
 93c:	d0 e0       	ldi	r29, 0x00	; 0
 93e:	17 c0       	rjmp	.+46     	; 0x96e <checkNextMove+0x78>
	{
		result += checkSingleBlock(values, block[0].x + block[i].x, block[0].y + block[i].y, checkOffset);
 940:	fe 01       	movw	r30, r28
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	ee 0f       	add	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	ec 0d       	add	r30, r12
 94c:	fd 1d       	adc	r31, r13
 94e:	42 81       	ldd	r20, Z+2	; 0x02
 950:	53 81       	ldd	r21, Z+3	; 0x03
 952:	60 81       	ld	r22, Z
 954:	71 81       	ldd	r23, Z+1	; 0x01
 956:	48 0d       	add	r20, r8
 958:	59 1d       	adc	r21, r9
 95a:	6a 0d       	add	r22, r10
 95c:	7b 1d       	adc	r23, r11
 95e:	93 01       	movw	r18, r6
 960:	82 01       	movw	r16, r4
 962:	c1 01       	movw	r24, r2
 964:	0e 94 bd 06 	call	0xd7a	; 0xd7a <checkSingleBlock>
 968:	e8 0e       	add	r14, r24
 96a:	f9 1e       	adc	r15, r25
}

int checkNextMove(int values[64], POS block[4], POS checkOffset)
{
	int result = checkSingleBlock(values, block[0].x, block[0].y, checkOffset);
	for (int i = 1; i<4; i++)
 96c:	21 96       	adiw	r28, 0x01	; 1
 96e:	c4 30       	cpi	r28, 0x04	; 4
 970:	d1 05       	cpc	r29, r1
 972:	34 f3       	brlt	.-52     	; 0x940 <checkNextMove+0x4a>
	{
		result += checkSingleBlock(values, block[0].x + block[i].x, block[0].y + block[i].y, checkOffset);
	}
	return result;
}
 974:	c7 01       	movw	r24, r14
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	ff 90       	pop	r15
 980:	ef 90       	pop	r14
 982:	df 90       	pop	r13
 984:	cf 90       	pop	r12
 986:	bf 90       	pop	r11
 988:	af 90       	pop	r10
 98a:	9f 90       	pop	r9
 98c:	8f 90       	pop	r8
 98e:	7f 90       	pop	r7
 990:	6f 90       	pop	r6
 992:	5f 90       	pop	r5
 994:	4f 90       	pop	r4
 996:	3f 90       	pop	r3
 998:	2f 90       	pop	r2
 99a:	08 95       	ret

Disassembly of section .text.checkFullLine:

00000a3e <checkFullLine>:

int checkFullLine(int values[64], int y)
{
 a3e:	0f 93       	push	r16
 a40:	1f 93       	push	r17
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
 a46:	ec 01       	movw	r28, r24
 a48:	8b 01       	movw	r16, r22
	return getValueInValues(values, 1, y)
 a4a:	ab 01       	movw	r20, r22
 a4c:	61 e0       	ldi	r22, 0x01	; 1
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
	&& getValueInValues(values, 3, y)
	&& getValueInValues(values, 4, y)
	&& getValueInValues(values, 5, y)
	&& getValueInValues(values, 6, y)
	&& getValueInValues(values, 7, y)
	&& getValueInValues(values, 8, y);
 a54:	00 97       	sbiw	r24, 0x00	; 0
 a56:	d1 f1       	breq	.+116    	; 0xacc <checkFullLine+0x8e>
}

int checkFullLine(int values[64], int y)
{
	return getValueInValues(values, 1, y)
	&& getValueInValues(values, 2, y)
 a58:	a8 01       	movw	r20, r16
 a5a:	62 e0       	ldi	r22, 0x02	; 2
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	ce 01       	movw	r24, r28
 a60:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 a64:	00 97       	sbiw	r24, 0x00	; 0
 a66:	91 f1       	breq	.+100    	; 0xacc <checkFullLine+0x8e>
	&& getValueInValues(values, 3, y)
 a68:	a8 01       	movw	r20, r16
 a6a:	63 e0       	ldi	r22, 0x03	; 3
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	ce 01       	movw	r24, r28
 a70:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 a74:	00 97       	sbiw	r24, 0x00	; 0
 a76:	51 f1       	breq	.+84     	; 0xacc <checkFullLine+0x8e>
	&& getValueInValues(values, 4, y)
 a78:	a8 01       	movw	r20, r16
 a7a:	64 e0       	ldi	r22, 0x04	; 4
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	ce 01       	movw	r24, r28
 a80:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	11 f1       	breq	.+68     	; 0xacc <checkFullLine+0x8e>
	&& getValueInValues(values, 5, y)
 a88:	a8 01       	movw	r20, r16
 a8a:	65 e0       	ldi	r22, 0x05	; 5
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	ce 01       	movw	r24, r28
 a90:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	d1 f0       	breq	.+52     	; 0xacc <checkFullLine+0x8e>
	&& getValueInValues(values, 6, y)
 a98:	a8 01       	movw	r20, r16
 a9a:	66 e0       	ldi	r22, 0x06	; 6
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	ce 01       	movw	r24, r28
 aa0:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 aa4:	00 97       	sbiw	r24, 0x00	; 0
 aa6:	91 f0       	breq	.+36     	; 0xacc <checkFullLine+0x8e>
	&& getValueInValues(values, 7, y)
 aa8:	a8 01       	movw	r20, r16
 aaa:	67 e0       	ldi	r22, 0x07	; 7
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	ce 01       	movw	r24, r28
 ab0:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 ab4:	00 97       	sbiw	r24, 0x00	; 0
 ab6:	51 f0       	breq	.+20     	; 0xacc <checkFullLine+0x8e>
	&& getValueInValues(values, 8, y);
 ab8:	a8 01       	movw	r20, r16
 aba:	68 e0       	ldi	r22, 0x08	; 8
 abc:	70 e0       	ldi	r23, 0x00	; 0
 abe:	ce 01       	movw	r24, r28
 ac0:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 ac4:	00 97       	sbiw	r24, 0x00	; 0
 ac6:	11 f0       	breq	.+4      	; 0xacc <checkFullLine+0x8e>
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	90 e0       	ldi	r25, 0x00	; 0
}
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	1f 91       	pop	r17
 ad2:	0f 91       	pop	r16
 ad4:	08 95       	ret

Disassembly of section .text.checkEmptyLine:

00000782 <checkEmptyLine>:

int checkEmptyLine(int values[64], int y)
{
 782:	0f 93       	push	r16
 784:	1f 93       	push	r17
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	ec 01       	movw	r28, r24
 78c:	8b 01       	movw	r16, r22
	return getValueInValues(values, 1, y)
 78e:	ab 01       	movw	r20, r22
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
	|| getValueInValues(values, 3, y)
	|| getValueInValues(values, 4, y)
	|| getValueInValues(values, 5, y)
	|| getValueInValues(values, 6, y)
	|| getValueInValues(values, 7, y)
	|| getValueInValues(values, 8, y);
 798:	89 2b       	or	r24, r25
 79a:	c9 f5       	brne	.+114    	; 0x80e <checkEmptyLine+0x8c>
}

int checkEmptyLine(int values[64], int y)
{
	return getValueInValues(values, 1, y)
	|| getValueInValues(values, 2, y)
 79c:	a8 01       	movw	r20, r16
 79e:	62 e0       	ldi	r22, 0x02	; 2
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	ce 01       	movw	r24, r28
 7a4:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 7a8:	89 2b       	or	r24, r25
 7aa:	a1 f5       	brne	.+104    	; 0x814 <checkEmptyLine+0x92>
	|| getValueInValues(values, 3, y)
 7ac:	a8 01       	movw	r20, r16
 7ae:	63 e0       	ldi	r22, 0x03	; 3
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	ce 01       	movw	r24, r28
 7b4:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 7b8:	89 2b       	or	r24, r25
 7ba:	79 f5       	brne	.+94     	; 0x81a <checkEmptyLine+0x98>
	|| getValueInValues(values, 4, y)
 7bc:	a8 01       	movw	r20, r16
 7be:	64 e0       	ldi	r22, 0x04	; 4
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	ce 01       	movw	r24, r28
 7c4:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 7c8:	89 2b       	or	r24, r25
 7ca:	51 f5       	brne	.+84     	; 0x820 <checkEmptyLine+0x9e>
	|| getValueInValues(values, 5, y)
 7cc:	a8 01       	movw	r20, r16
 7ce:	65 e0       	ldi	r22, 0x05	; 5
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	ce 01       	movw	r24, r28
 7d4:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 7d8:	89 2b       	or	r24, r25
 7da:	29 f5       	brne	.+74     	; 0x826 <checkEmptyLine+0xa4>
	|| getValueInValues(values, 6, y)
 7dc:	a8 01       	movw	r20, r16
 7de:	66 e0       	ldi	r22, 0x06	; 6
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	ce 01       	movw	r24, r28
 7e4:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 7e8:	89 2b       	or	r24, r25
 7ea:	01 f5       	brne	.+64     	; 0x82c <checkEmptyLine+0xaa>
	|| getValueInValues(values, 7, y)
 7ec:	a8 01       	movw	r20, r16
 7ee:	67 e0       	ldi	r22, 0x07	; 7
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	ce 01       	movw	r24, r28
 7f4:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 7f8:	89 2b       	or	r24, r25
 7fa:	d9 f4       	brne	.+54     	; 0x832 <checkEmptyLine+0xb0>
	|| getValueInValues(values, 8, y);
 7fc:	a8 01       	movw	r20, r16
 7fe:	68 e0       	ldi	r22, 0x08	; 8
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	ce 01       	movw	r24, r28
 804:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	b1 f4       	brne	.+44     	; 0x838 <checkEmptyLine+0xb6>
 80c:	17 c0       	rjmp	.+46     	; 0x83c <checkEmptyLine+0xba>
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	14 c0       	rjmp	.+40     	; 0x83c <checkEmptyLine+0xba>
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	11 c0       	rjmp	.+34     	; 0x83c <checkEmptyLine+0xba>
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e c0       	rjmp	.+28     	; 0x83c <checkEmptyLine+0xba>
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0b c0       	rjmp	.+22     	; 0x83c <checkEmptyLine+0xba>
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	08 c0       	rjmp	.+16     	; 0x83c <checkEmptyLine+0xba>
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	05 c0       	rjmp	.+10     	; 0x83c <checkEmptyLine+0xba>
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <checkEmptyLine+0xba>
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	90 e0       	ldi	r25, 0x00	; 0
}
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	08 95       	ret

Disassembly of section .text.clearLine:

00000d40 <clearLine>:

void clearLine(int values[64], int y) 
{
 d40:	ef 92       	push	r14
 d42:	ff 92       	push	r15
 d44:	0f 93       	push	r16
 d46:	1f 93       	push	r17
 d48:	cf 93       	push	r28
 d4a:	df 93       	push	r29
 d4c:	7c 01       	movw	r14, r24
 d4e:	8b 01       	movw	r16, r22
	for (int i = 1; i<9; i++)
 d50:	c1 e0       	ldi	r28, 0x01	; 1
 d52:	d0 e0       	ldi	r29, 0x00	; 0
 d54:	08 c0       	rjmp	.+16     	; 0xd66 <clearLine+0x26>
	{
		setValueInValues(values, i, y, 0);
 d56:	20 e0       	ldi	r18, 0x00	; 0
 d58:	30 e0       	ldi	r19, 0x00	; 0
 d5a:	a8 01       	movw	r20, r16
 d5c:	be 01       	movw	r22, r28
 d5e:	c7 01       	movw	r24, r14
 d60:	0e 94 01 07 	call	0xe02	; 0xe02 <setValueInValues>
	|| getValueInValues(values, 8, y);
}

void clearLine(int values[64], int y) 
{
	for (int i = 1; i<9; i++)
 d64:	21 96       	adiw	r28, 0x01	; 1
 d66:	c9 30       	cpi	r28, 0x09	; 9
 d68:	d1 05       	cpc	r29, r1
 d6a:	ac f3       	brlt	.-22     	; 0xd56 <clearLine+0x16>
	{
		setValueInValues(values, i, y, 0);
	}
}
 d6c:	df 91       	pop	r29
 d6e:	cf 91       	pop	r28
 d70:	1f 91       	pop	r17
 d72:	0f 91       	pop	r16
 d74:	ff 90       	pop	r15
 d76:	ef 90       	pop	r14
 d78:	08 95       	ret

Disassembly of section .text.clearAndMoveLine:

00000b4c <clearAndMoveLine>:

void clearAndMoveLine(int values[64], int y) 
{
 b4c:	ef 92       	push	r14
 b4e:	ff 92       	push	r15
 b50:	0f 93       	push	r16
 b52:	1f 93       	push	r17
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	7c 01       	movw	r14, r24
 b5a:	8b 01       	movw	r16, r22
	for (int i = y; i>1; i--)
 b5c:	1a c0       	rjmp	.+52     	; 0xb92 <clearAndMoveLine+0x46>
	{
		clearLine(values, i);
 b5e:	b8 01       	movw	r22, r16
 b60:	c7 01       	movw	r24, r14
 b62:	0e 94 a0 06 	call	0xd40	; 0xd40 <clearLine>
		for (int j = 1; j<9; j++)
 b66:	c1 e0       	ldi	r28, 0x01	; 1
 b68:	d0 e0       	ldi	r29, 0x00	; 0
 b6a:	0e c0       	rjmp	.+28     	; 0xb88 <clearAndMoveLine+0x3c>
		{
			setValueInValues(values, j, i, getValueInValues(values, j, i-1));
 b6c:	a8 01       	movw	r20, r16
 b6e:	41 50       	subi	r20, 0x01	; 1
 b70:	51 09       	sbc	r21, r1
 b72:	be 01       	movw	r22, r28
 b74:	c7 01       	movw	r24, r14
 b76:	0e 94 15 07 	call	0xe2a	; 0xe2a <getValueInValues>
 b7a:	9c 01       	movw	r18, r24
 b7c:	a8 01       	movw	r20, r16
 b7e:	be 01       	movw	r22, r28
 b80:	c7 01       	movw	r24, r14
 b82:	0e 94 01 07 	call	0xe02	; 0xe02 <setValueInValues>
void clearAndMoveLine(int values[64], int y) 
{
	for (int i = y; i>1; i--)
	{
		clearLine(values, i);
		for (int j = 1; j<9; j++)
 b86:	21 96       	adiw	r28, 0x01	; 1
 b88:	c9 30       	cpi	r28, 0x09	; 9
 b8a:	d1 05       	cpc	r29, r1
 b8c:	7c f3       	brlt	.-34     	; 0xb6c <clearAndMoveLine+0x20>
	}
}

void clearAndMoveLine(int values[64], int y) 
{
	for (int i = y; i>1; i--)
 b8e:	01 50       	subi	r16, 0x01	; 1
 b90:	11 09       	sbc	r17, r1
 b92:	02 30       	cpi	r16, 0x02	; 2
 b94:	11 05       	cpc	r17, r1
 b96:	1c f7       	brge	.-58     	; 0xb5e <clearAndMoveLine+0x12>
		for (int j = 1; j<9; j++)
		{
			setValueInValues(values, j, i, getValueInValues(values, j, i-1));
		}
	}
	clearLine(values, 1);
 b98:	61 e0       	ldi	r22, 0x01	; 1
 b9a:	70 e0       	ldi	r23, 0x00	; 0
 b9c:	c7 01       	movw	r24, r14
 b9e:	0e 94 a0 06 	call	0xd40	; 0xd40 <clearLine>
}
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	ff 90       	pop	r15
 bac:	ef 90       	pop	r14
 bae:	08 95       	ret

Disassembly of section .text.drawShape:

00000ad6 <drawShape>:

void drawShape(int values[64], POS block[4])
{
 ad6:	ef 92       	push	r14
 ad8:	ff 92       	push	r15
 ada:	0f 93       	push	r16
 adc:	1f 93       	push	r17
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
 ae2:	7c 01       	movw	r14, r24
 ae4:	8b 01       	movw	r16, r22
	setValueInValues(values, block[0].x, block[0].y, 1);
 ae6:	db 01       	movw	r26, r22
 ae8:	12 96       	adiw	r26, 0x02	; 2
 aea:	4d 91       	ld	r20, X+
 aec:	5c 91       	ld	r21, X
 aee:	13 97       	sbiw	r26, 0x03	; 3
 af0:	6d 91       	ld	r22, X+
 af2:	7c 91       	ld	r23, X
 af4:	21 e0       	ldi	r18, 0x01	; 1
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	0e 94 01 07 	call	0xe02	; 0xe02 <setValueInValues>
	for (int i = 1; i<4; i++)
 afc:	c1 e0       	ldi	r28, 0x01	; 1
 afe:	d0 e0       	ldi	r29, 0x00	; 0
 b00:	1b c0       	rjmp	.+54     	; 0xb38 <drawShape+0x62>
	{
		setValueInValues(values, block[0].x + block[i].x, block[0].y + block[i].y, 1);
 b02:	f8 01       	movw	r30, r16
 b04:	42 81       	ldd	r20, Z+2	; 0x02
 b06:	53 81       	ldd	r21, Z+3	; 0x03
 b08:	fe 01       	movw	r30, r28
 b0a:	ee 0f       	add	r30, r30
 b0c:	ff 1f       	adc	r31, r31
 b0e:	ee 0f       	add	r30, r30
 b10:	ff 1f       	adc	r31, r31
 b12:	e0 0f       	add	r30, r16
 b14:	f1 1f       	adc	r31, r17
 b16:	22 81       	ldd	r18, Z+2	; 0x02
 b18:	33 81       	ldd	r19, Z+3	; 0x03
 b1a:	d8 01       	movw	r26, r16
 b1c:	6d 91       	ld	r22, X+
 b1e:	7c 91       	ld	r23, X
 b20:	80 81       	ld	r24, Z
 b22:	91 81       	ldd	r25, Z+1	; 0x01
 b24:	42 0f       	add	r20, r18
 b26:	53 1f       	adc	r21, r19
 b28:	68 0f       	add	r22, r24
 b2a:	79 1f       	adc	r23, r25
 b2c:	21 e0       	ldi	r18, 0x01	; 1
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	c7 01       	movw	r24, r14
 b32:	0e 94 01 07 	call	0xe02	; 0xe02 <setValueInValues>
}

void drawShape(int values[64], POS block[4])
{
	setValueInValues(values, block[0].x, block[0].y, 1);
	for (int i = 1; i<4; i++)
 b36:	21 96       	adiw	r28, 0x01	; 1
 b38:	c4 30       	cpi	r28, 0x04	; 4
 b3a:	d1 05       	cpc	r29, r1
 b3c:	14 f3       	brlt	.-60     	; 0xb02 <drawShape+0x2c>
	{
		setValueInValues(values, block[0].x + block[i].x, block[0].y + block[i].y, 1);
	}
}
 b3e:	df 91       	pop	r29
 b40:	cf 91       	pop	r28
 b42:	1f 91       	pop	r17
 b44:	0f 91       	pop	r16
 b46:	ff 90       	pop	r15
 b48:	ef 90       	pop	r14
 b4a:	08 95       	ret

Disassembly of section .text.wallCheckRight:

00000bb0 <wallCheckRight>:

int wallCheckRight(POS block[4])
{
	return block[0].x < 8 &&
 bb0:	fc 01       	movw	r30, r24
 bb2:	20 81       	ld	r18, Z
 bb4:	31 81       	ldd	r19, Z+1	; 0x01
	block[0].x + block[1].x < 8 &&
	block[0].x + block[2].x < 8 &&
 bb6:	28 30       	cpi	r18, 0x08	; 8
 bb8:	31 05       	cpc	r19, r1
 bba:	c4 f4       	brge	.+48     	; 0xbec <wallCheckRight+0x3c>
}

int wallCheckRight(POS block[4])
{
	return block[0].x < 8 &&
	block[0].x + block[1].x < 8 &&
 bbc:	44 81       	ldd	r20, Z+4	; 0x04
 bbe:	55 81       	ldd	r21, Z+5	; 0x05
 bc0:	42 0f       	add	r20, r18
 bc2:	53 1f       	adc	r21, r19
	}
}

int wallCheckRight(POS block[4])
{
	return block[0].x < 8 &&
 bc4:	48 30       	cpi	r20, 0x08	; 8
 bc6:	51 05       	cpc	r21, r1
 bc8:	a4 f4       	brge	.+40     	; 0xbf2 <wallCheckRight+0x42>
	block[0].x + block[1].x < 8 &&
	block[0].x + block[2].x < 8 &&
 bca:	40 85       	ldd	r20, Z+8	; 0x08
 bcc:	51 85       	ldd	r21, Z+9	; 0x09
 bce:	42 0f       	add	r20, r18
 bd0:	53 1f       	adc	r21, r19
}

int wallCheckRight(POS block[4])
{
	return block[0].x < 8 &&
	block[0].x + block[1].x < 8 &&
 bd2:	48 30       	cpi	r20, 0x08	; 8
 bd4:	51 05       	cpc	r21, r1
 bd6:	84 f4       	brge	.+32     	; 0xbf8 <wallCheckRight+0x48>
	block[0].x + block[2].x < 8 &&
	block[0].x + block[3].x < 8;
 bd8:	84 85       	ldd	r24, Z+12	; 0x0c
 bda:	95 85       	ldd	r25, Z+13	; 0x0d
 bdc:	28 0f       	add	r18, r24
 bde:	39 1f       	adc	r19, r25

int wallCheckRight(POS block[4])
{
	return block[0].x < 8 &&
	block[0].x + block[1].x < 8 &&
	block[0].x + block[2].x < 8 &&
 be0:	28 30       	cpi	r18, 0x08	; 8
 be2:	31 05       	cpc	r19, r1
 be4:	64 f0       	brlt	.+24     	; 0xbfe <wallCheckRight+0x4e>
 be6:	80 e0       	ldi	r24, 0x00	; 0
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	08 95       	ret
 bec:	80 e0       	ldi	r24, 0x00	; 0
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	08 95       	ret
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	08 95       	ret
 bf8:	80 e0       	ldi	r24, 0x00	; 0
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	08 95       	ret
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	90 e0       	ldi	r25, 0x00	; 0
	block[0].x + block[3].x < 8;
}
 c02:	08 95       	ret

Disassembly of section .text.wallCheckLeft:

00000cac <wallCheckLeft>:

int wallCheckLeft(POS block[4])
{
 cac:	fc 01       	movw	r30, r24
	return block[0].x > 1 &&
 cae:	20 81       	ld	r18, Z
 cb0:	31 81       	ldd	r19, Z+1	; 0x01
	block[0].x + block[1].x > 1 &&
	block[0].x + block[2].x > 1 &&
 cb2:	22 30       	cpi	r18, 0x02	; 2
 cb4:	31 05       	cpc	r19, r1
 cb6:	b4 f0       	brlt	.+44     	; 0xce4 <wallCheckLeft+0x38>
}

int wallCheckLeft(POS block[4])
{
	return block[0].x > 1 &&
	block[0].x + block[1].x > 1 &&
 cb8:	84 81       	ldd	r24, Z+4	; 0x04
 cba:	95 81       	ldd	r25, Z+5	; 0x05
 cbc:	82 0f       	add	r24, r18
 cbe:	93 1f       	adc	r25, r19
	block[0].x + block[3].x < 8;
}

int wallCheckLeft(POS block[4])
{
	return block[0].x > 1 &&
 cc0:	02 97       	sbiw	r24, 0x02	; 2
 cc2:	9c f0       	brlt	.+38     	; 0xcea <wallCheckLeft+0x3e>
	block[0].x + block[1].x > 1 &&
	block[0].x + block[2].x > 1 &&
 cc4:	80 85       	ldd	r24, Z+8	; 0x08
 cc6:	91 85       	ldd	r25, Z+9	; 0x09
 cc8:	82 0f       	add	r24, r18
 cca:	93 1f       	adc	r25, r19
}

int wallCheckLeft(POS block[4])
{
	return block[0].x > 1 &&
	block[0].x + block[1].x > 1 &&
 ccc:	02 97       	sbiw	r24, 0x02	; 2
 cce:	84 f0       	brlt	.+32     	; 0xcf0 <wallCheckLeft+0x44>
	block[0].x + block[2].x > 1 &&
	block[0].x + block[3].x > 1;
 cd0:	84 85       	ldd	r24, Z+12	; 0x0c
 cd2:	95 85       	ldd	r25, Z+13	; 0x0d
 cd4:	28 0f       	add	r18, r24
 cd6:	39 1f       	adc	r19, r25

int wallCheckLeft(POS block[4])
{
	return block[0].x > 1 &&
	block[0].x + block[1].x > 1 &&
	block[0].x + block[2].x > 1 &&
 cd8:	22 30       	cpi	r18, 0x02	; 2
 cda:	31 05       	cpc	r19, r1
 cdc:	64 f4       	brge	.+24     	; 0xcf6 <wallCheckLeft+0x4a>
 cde:	80 e0       	ldi	r24, 0x00	; 0
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	08 95       	ret
 ce4:	80 e0       	ldi	r24, 0x00	; 0
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	08 95       	ret
 cea:	80 e0       	ldi	r24, 0x00	; 0
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	08 95       	ret
 cf0:	80 e0       	ldi	r24, 0x00	; 0
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	08 95       	ret
 cf6:	81 e0       	ldi	r24, 0x01	; 1
 cf8:	90 e0       	ldi	r25, 0x00	; 0
	block[0].x + block[3].x > 1;
}
 cfa:	08 95       	ret

Disassembly of section .text.wallCheckRightTurn:

00000c04 <wallCheckRightTurn>:

int wallCheckRightTurn(POS block[4])
{
	return block[0].x <= 8 &&
 c04:	fc 01       	movw	r30, r24
 c06:	20 81       	ld	r18, Z
 c08:	31 81       	ldd	r19, Z+1	; 0x01
	block[0].x + block[1].x <= 8 &&
	block[0].x + block[2].x <= 8 &&
 c0a:	29 30       	cpi	r18, 0x09	; 9
 c0c:	31 05       	cpc	r19, r1
 c0e:	c4 f4       	brge	.+48     	; 0xc40 <wallCheckRightTurn+0x3c>
}

int wallCheckRightTurn(POS block[4])
{
	return block[0].x <= 8 &&
	block[0].x + block[1].x <= 8 &&
 c10:	44 81       	ldd	r20, Z+4	; 0x04
 c12:	55 81       	ldd	r21, Z+5	; 0x05
 c14:	42 0f       	add	r20, r18
 c16:	53 1f       	adc	r21, r19
	block[0].x + block[3].x > 1;
}

int wallCheckRightTurn(POS block[4])
{
	return block[0].x <= 8 &&
 c18:	49 30       	cpi	r20, 0x09	; 9
 c1a:	51 05       	cpc	r21, r1
 c1c:	a4 f4       	brge	.+40     	; 0xc46 <wallCheckRightTurn+0x42>
	block[0].x + block[1].x <= 8 &&
	block[0].x + block[2].x <= 8 &&
 c1e:	40 85       	ldd	r20, Z+8	; 0x08
 c20:	51 85       	ldd	r21, Z+9	; 0x09
 c22:	42 0f       	add	r20, r18
 c24:	53 1f       	adc	r21, r19
}

int wallCheckRightTurn(POS block[4])
{
	return block[0].x <= 8 &&
	block[0].x + block[1].x <= 8 &&
 c26:	49 30       	cpi	r20, 0x09	; 9
 c28:	51 05       	cpc	r21, r1
 c2a:	84 f4       	brge	.+32     	; 0xc4c <wallCheckRightTurn+0x48>
	block[0].x + block[2].x <= 8 &&
	block[0].x + block[3].x <= 8;
 c2c:	84 85       	ldd	r24, Z+12	; 0x0c
 c2e:	95 85       	ldd	r25, Z+13	; 0x0d
 c30:	28 0f       	add	r18, r24
 c32:	39 1f       	adc	r19, r25

int wallCheckRightTurn(POS block[4])
{
	return block[0].x <= 8 &&
	block[0].x + block[1].x <= 8 &&
	block[0].x + block[2].x <= 8 &&
 c34:	29 30       	cpi	r18, 0x09	; 9
 c36:	31 05       	cpc	r19, r1
 c38:	64 f0       	brlt	.+24     	; 0xc52 <wallCheckRightTurn+0x4e>
 c3a:	80 e0       	ldi	r24, 0x00	; 0
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	08 95       	ret
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	08 95       	ret
 c46:	80 e0       	ldi	r24, 0x00	; 0
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	08 95       	ret
 c4c:	80 e0       	ldi	r24, 0x00	; 0
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	08 95       	ret
 c52:	81 e0       	ldi	r24, 0x01	; 1
 c54:	90 e0       	ldi	r25, 0x00	; 0
	block[0].x + block[3].x <= 8;
}
 c56:	08 95       	ret

Disassembly of section .text.wallCheckLeftTurn:

00000c58 <wallCheckLeftTurn>:

int wallCheckLeftTurn(POS block[4])
{
 c58:	fc 01       	movw	r30, r24
	return block[0].x >= 1 &&
 c5a:	20 81       	ld	r18, Z
 c5c:	31 81       	ldd	r19, Z+1	; 0x01
	block[0].x + block[1].x >= 1 &&
	block[0].x + block[2].x >= 1 &&
 c5e:	12 16       	cp	r1, r18
 c60:	13 06       	cpc	r1, r19
 c62:	c4 f4       	brge	.+48     	; 0xc94 <wallCheckLeftTurn+0x3c>
}

int wallCheckLeftTurn(POS block[4])
{
	return block[0].x >= 1 &&
	block[0].x + block[1].x >= 1 &&
 c64:	84 81       	ldd	r24, Z+4	; 0x04
 c66:	95 81       	ldd	r25, Z+5	; 0x05
 c68:	82 0f       	add	r24, r18
 c6a:	93 1f       	adc	r25, r19
	block[0].x + block[3].x <= 8;
}

int wallCheckLeftTurn(POS block[4])
{
	return block[0].x >= 1 &&
 c6c:	18 16       	cp	r1, r24
 c6e:	19 06       	cpc	r1, r25
 c70:	a4 f4       	brge	.+40     	; 0xc9a <wallCheckLeftTurn+0x42>
	block[0].x + block[1].x >= 1 &&
	block[0].x + block[2].x >= 1 &&
 c72:	80 85       	ldd	r24, Z+8	; 0x08
 c74:	91 85       	ldd	r25, Z+9	; 0x09
 c76:	82 0f       	add	r24, r18
 c78:	93 1f       	adc	r25, r19
}

int wallCheckLeftTurn(POS block[4])
{
	return block[0].x >= 1 &&
	block[0].x + block[1].x >= 1 &&
 c7a:	18 16       	cp	r1, r24
 c7c:	19 06       	cpc	r1, r25
 c7e:	84 f4       	brge	.+32     	; 0xca0 <wallCheckLeftTurn+0x48>
	block[0].x + block[2].x >= 1 &&
	block[0].x + block[3].x >= 1;
 c80:	84 85       	ldd	r24, Z+12	; 0x0c
 c82:	95 85       	ldd	r25, Z+13	; 0x0d
 c84:	28 0f       	add	r18, r24
 c86:	39 1f       	adc	r19, r25

int wallCheckLeftTurn(POS block[4])
{
	return block[0].x >= 1 &&
	block[0].x + block[1].x >= 1 &&
	block[0].x + block[2].x >= 1 &&
 c88:	12 16       	cp	r1, r18
 c8a:	13 06       	cpc	r1, r19
 c8c:	64 f0       	brlt	.+24     	; 0xca6 <wallCheckLeftTurn+0x4e>
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	08 95       	ret
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	08 95       	ret
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	08 95       	ret
 ca0:	80 e0       	ldi	r24, 0x00	; 0
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	08 95       	ret
 ca6:	81 e0       	ldi	r24, 0x01	; 1
 ca8:	90 e0       	ldi	r25, 0x00	; 0
	block[0].x + block[3].x >= 1;
}
 caa:	08 95       	ret

Disassembly of section .text.main:

000000fc <main>:
int rotation;



int main( void )
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	ca 55       	subi	r28, 0x5A	; 90
 106:	d1 40       	sbci	r29, 0x01	; 1
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
	
	twi_init();		// Init TWI interface
 112:	0e 94 66 09 	call	0x12cc	; 0x12cc <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 116:	0e 94 4e 09 	call	0x129c	; 0x129c <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 11a:	80 ee       	ldi	r24, 0xE0	; 224
 11c:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 120:	81 e2       	ldi	r24, 0x21	; 33
 122:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_stop();
 126:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <twi_stop>

	twi_start();
 12a:	0e 94 4e 09 	call	0x129c	; 0x129c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 12e:	80 ee       	ldi	r24, 0xE0	; 224
 130:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 134:	80 ea       	ldi	r24, 0xA0	; 160
 136:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_stop();
 13a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <twi_stop>

	twi_start();
 13e:	0e 94 4e 09 	call	0x129c	; 0x129c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 142:	80 ee       	ldi	r24, 0xE0	; 224
 144:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 148:	83 ee       	ldi	r24, 0xE3	; 227
 14a:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_stop();
 14e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <twi_stop>

	twi_start();
 152:	0e 94 4e 09 	call	0x129c	; 0x129c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 156:	80 ee       	ldi	r24, 0xE0	; 224
 158:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 15c:	81 e8       	ldi	r24, 0x81	; 129
 15e:	0e 94 44 09 	call	0x1288	; 0x1288 <twi_tx>
	twi_stop();
 162:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <twi_stop>
	
	send_byte(0x00, 0x00);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>
	send_byte(0x02, 0x00);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>
	send_byte(0x04, 0x00);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>
	send_byte(0x06, 0x00);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>
	send_byte(0x08, 0x00);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>
	send_byte(0x0a, 0x00);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>
	send_byte(0x0c, 0x00);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	8c e0       	ldi	r24, 0x0C	; 12
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>
	send_byte(0x0e, 0x00);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 ed 06 	call	0xdda	; 0xdda <send_byte>

	//int bytecode = 0x01;
	DDRF = 0x00;				// set PORTF for input (ADC)
 1c6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	ADMUX = 0b11100001;			// AREF=2.56v, ADLAR=1, ADC1
 1ca:	81 ee       	ldi	r24, 0xE1	; 225
 1cc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;		// ADC-enable, not started, not free running, division by 64
 1ce:	86 e8       	ldi	r24, 0x86	; 134
 1d0:	86 b9       	out	0x06, r24	; 6
	TCCR1B = 0b00000101;		// Initialize T1: timer, prescaler=1024, CTC,RUN
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	8e bd       	out	0x2e, r24	; 46

	block[0].x = 4;
 1d6:	e0 e0       	ldi	r30, 0x00	; 0
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	91 83       	std	Z+1, r25	; 0x01
 1e0:	80 83       	st	Z, r24
	block[0].y = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	93 83       	std	Z+3, r25	; 0x03
 1e8:	82 83       	std	Z+2, r24	; 0x02
	rotation = 0;
 1ea:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rotation+0x1>
 1ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rotation>
	
	void (*ptr[4]) (POS block[4]);
	
	void (*ptrO[4]) (POS block[4]) = {makeShapeO, makeShapeO, makeShapeO, makeShapeO};
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	e2 e1       	ldi	r30, 0x12	; 18
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	de 01       	movw	r26, r28
 1fa:	19 96       	adiw	r26, 0x09	; 9
 1fc:	01 90       	ld	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	8a 95       	dec	r24
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x100>
	void (*ptrI[4]) (POS block[4]) = {makeShapeI1, makeShapeI2, makeShapeI3, makeShapeI4};
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	ea e1       	ldi	r30, 0x1A	; 26
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	de 01       	movw	r26, r28
 20c:	51 96       	adiw	r26, 0x11	; 17
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	8a 95       	dec	r24
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x112>
	void (*ptrT[4]) (POS block[4]) = {makeShapeT1, makeShapeT2, makeShapeT3, makeShapeT4};
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	e2 e2       	ldi	r30, 0x22	; 34
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	de 01       	movw	r26, r28
 21e:	59 96       	adiw	r26, 0x19	; 25
 220:	01 90       	ld	r0, Z+
 222:	0d 92       	st	X+, r0
 224:	8a 95       	dec	r24
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x124>
	void (*ptrS[4]) (POS block[4]) = {makeShapeS1, makeShapeS2, makeShapeS3, makeShapeS4};
 228:	88 e0       	ldi	r24, 0x08	; 8
 22a:	ea e2       	ldi	r30, 0x2A	; 42
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	de 01       	movw	r26, r28
 230:	91 96       	adiw	r26, 0x21	; 33
 232:	01 90       	ld	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	8a 95       	dec	r24
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x136>
	void (*ptrZ[4]) (POS block[4]) = {makeShapeZ1, makeShapeZ2, makeShapeZ3, makeShapeZ4};
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	e2 e3       	ldi	r30, 0x32	; 50
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	de 01       	movw	r26, r28
 242:	99 96       	adiw	r26, 0x29	; 41
 244:	01 90       	ld	r0, Z+
 246:	0d 92       	st	X+, r0
 248:	8a 95       	dec	r24
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x148>
	void (*ptrJ[4]) (POS block[4]) = {makeShapeJ1, makeShapeJ2, makeShapeJ3, makeShapeJ4};
 24c:	88 e0       	ldi	r24, 0x08	; 8
 24e:	ea e3       	ldi	r30, 0x3A	; 58
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	de 01       	movw	r26, r28
 254:	d1 96       	adiw	r26, 0x31	; 49
 256:	01 90       	ld	r0, Z+
 258:	0d 92       	st	X+, r0
 25a:	8a 95       	dec	r24
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x15a>
	void (*ptrL[4]) (POS block[4]) = {makeShapeL1, makeShapeL2, makeShapeL3, makeShapeL4};
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	e2 e4       	ldi	r30, 0x42	; 66
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	de 01       	movw	r26, r28
 266:	d9 96       	adiw	r26, 0x39	; 57
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	8a 95       	dec	r24
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x16c>
		
	void (**ptrptr[7]) (POS block[4]) = {ptrO,ptrI,ptrT,ptrS,ptrZ,ptrJ,ptrL};
 270:	ce 01       	movw	r24, r28
 272:	09 96       	adiw	r24, 0x09	; 9
 274:	23 96       	adiw	r28, 0x03	; 3
 276:	9f af       	std	Y+63, r25	; 0x3f
 278:	8e af       	std	Y+62, r24	; 0x3e
 27a:	23 97       	sbiw	r28, 0x03	; 3
 27c:	08 96       	adiw	r24, 0x08	; 8
 27e:	25 96       	adiw	r28, 0x05	; 5
 280:	9f af       	std	Y+63, r25	; 0x3f
 282:	8e af       	std	Y+62, r24	; 0x3e
 284:	25 97       	sbiw	r28, 0x05	; 5
 286:	08 96       	adiw	r24, 0x08	; 8
 288:	27 96       	adiw	r28, 0x07	; 7
 28a:	9f af       	std	Y+63, r25	; 0x3f
 28c:	8e af       	std	Y+62, r24	; 0x3e
 28e:	27 97       	sbiw	r28, 0x07	; 7
 290:	08 96       	adiw	r24, 0x08	; 8
 292:	29 96       	adiw	r28, 0x09	; 9
 294:	9f af       	std	Y+63, r25	; 0x3f
 296:	8e af       	std	Y+62, r24	; 0x3e
 298:	29 97       	sbiw	r28, 0x09	; 9
 29a:	08 96       	adiw	r24, 0x08	; 8
 29c:	2b 96       	adiw	r28, 0x0b	; 11
 29e:	9f af       	std	Y+63, r25	; 0x3f
 2a0:	8e af       	std	Y+62, r24	; 0x3e
 2a2:	2b 97       	sbiw	r28, 0x0b	; 11
 2a4:	08 96       	adiw	r24, 0x08	; 8
 2a6:	2d 96       	adiw	r28, 0x0d	; 13
 2a8:	9f af       	std	Y+63, r25	; 0x3f
 2aa:	8e af       	std	Y+62, r24	; 0x3e
 2ac:	2d 97       	sbiw	r28, 0x0d	; 13
 2ae:	08 96       	adiw	r24, 0x08	; 8
 2b0:	2f 96       	adiw	r28, 0x0f	; 15
 2b2:	9f af       	std	Y+63, r25	; 0x3f
 2b4:	8e af       	std	Y+62, r24	; 0x3e
 2b6:	2f 97       	sbiw	r28, 0x0f	; 15
	

	ADMUX = 0b11100000;				// AREF=2.56v, ADLAR=1, ADC0
 2b8:	80 ee       	ldi	r24, 0xE0	; 224
 2ba:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0b01000000;			// Start ADC
 2bc:	86 b1       	in	r24, 0x06	; 6
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	86 b9       	out	0x06, r24	; 6
	while ( ADCSRA & 0b01000000 ) ;	// Wait for completion
 2c2:	36 99       	sbic	0x06, 6	; 6
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <main+0x1c6>
	
	int randData = ADCH;
 2c6:	25 b1       	in	r18, 0x05	; 5
 2c8:	30 e0       	ldi	r19, 0x00	; 0
	
	
	ADMUX = 0b11100001;				// AREF=2.56v, ADLAR=1, ADC1
 2ca:	81 ee       	ldi	r24, 0xE1	; 225
 2cc:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0b01000000;			// Start ADC
 2ce:	86 b1       	in	r24, 0x06	; 6
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	86 b9       	out	0x06, r24	; 6
	while ( ADCSRA & 0b01000000 ) ;	// Wait for completion
 2d4:	36 99       	sbic	0x06, 6	; 6
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <main+0x1d8>
	
	int randData2 = ADCH;
 2d8:	85 b1       	in	r24, 0x05	; 5
 2da:	90 e0       	ldi	r25, 0x00	; 0
	
	
	srand(randData*randData*randData2*randData2);
 2dc:	22 9f       	mul	r18, r18
 2de:	a0 01       	movw	r20, r0
 2e0:	23 9f       	mul	r18, r19
 2e2:	50 0d       	add	r21, r0
 2e4:	50 0d       	add	r21, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	84 9f       	mul	r24, r20
 2ea:	90 01       	movw	r18, r0
 2ec:	85 9f       	mul	r24, r21
 2ee:	30 0d       	add	r19, r0
 2f0:	94 9f       	mul	r25, r20
 2f2:	30 0d       	add	r19, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	ac 01       	movw	r20, r24
 2f8:	42 9f       	mul	r20, r18
 2fa:	c0 01       	movw	r24, r0
 2fc:	43 9f       	mul	r20, r19
 2fe:	90 0d       	add	r25, r0
 300:	52 9f       	mul	r21, r18
 302:	90 0d       	add	r25, r0
 304:	11 24       	eor	r1, r1
 306:	0e 94 72 04 	call	0x8e4	; 0x8e4 <srand>
	int number = ((rand() % (7 - 1 + 1)) + 1) - 1;
 30a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <rand>
 30e:	67 e0       	ldi	r22, 0x07	; 7
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	0e 94 79 07 	call	0xef2	; 0xef2 <__divmodhi4>
	ptr[0] = ptrptr[number][0];
 316:	fc 01       	movw	r30, r24
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	8c 0f       	add	r24, r28
 322:	9d 1f       	adc	r25, r29
 324:	e8 0f       	add	r30, r24
 326:	f9 1f       	adc	r31, r25
 328:	01 90       	ld	r0, Z+
 32a:	f0 81       	ld	r31, Z
 32c:	e0 2d       	mov	r30, r0
 32e:	80 81       	ld	r24, Z
 330:	91 81       	ldd	r25, Z+1	; 0x01
 332:	9a 83       	std	Y+2, r25	; 0x02
 334:	89 83       	std	Y+1, r24	; 0x01
	ptr[1] = ptrptr[number][1];
 336:	82 81       	ldd	r24, Z+2	; 0x02
 338:	93 81       	ldd	r25, Z+3	; 0x03
 33a:	9c 83       	std	Y+4, r25	; 0x04
 33c:	8b 83       	std	Y+3, r24	; 0x03
	ptr[2] = ptrptr[number][2];
 33e:	84 81       	ldd	r24, Z+4	; 0x04
 340:	95 81       	ldd	r25, Z+5	; 0x05
 342:	9e 83       	std	Y+6, r25	; 0x06
 344:	8d 83       	std	Y+5, r24	; 0x05
	ptr[3] = ptrptr[number][3];
 346:	86 81       	ldd	r24, Z+6	; 0x06
 348:	97 81       	ldd	r25, Z+7	; 0x07
 34a:	98 87       	std	Y+8, r25	; 0x08
 34c:	8f 83       	std	Y+7, r24	; 0x07
	int isSinking = 1;
 34e:	cc 24       	eor	r12, r12
 350:	c3 94       	inc	r12
 352:	d1 2c       	mov	r13, r1
	int leftRightControl;
	int upDownControl;
			
	while (1)
	{
		ADMUX = 0b11100000;				// AREF=2.56v, ADLAR=1, ADC0
 354:	80 ee       	ldi	r24, 0xE0	; 224
 356:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= 0b01000000;			// Start ADC
 358:	86 b1       	in	r24, 0x06	; 6
 35a:	80 64       	ori	r24, 0x40	; 64
 35c:	86 b9       	out	0x06, r24	; 6
		while ( ADCSRA & 0b01000000 ) ;	// Wait for completion
 35e:	36 99       	sbic	0x06, 6	; 6
 360:	fe cf       	rjmp	.-4      	; 0x35e <main+0x262>
		
		leftRightControl = ADCH;
 362:	e5 b0       	in	r14, 0x05	; 5
 364:	f1 2c       	mov	r15, r1
		
		ADMUX = 0b11100001;				// AREF=2.56v, ADLAR=1, ADC1
 366:	81 ee       	ldi	r24, 0xE1	; 225
 368:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= 0b01000000;			// Start ADC
 36a:	86 b1       	in	r24, 0x06	; 6
 36c:	80 64       	ori	r24, 0x40	; 64
 36e:	86 b9       	out	0x06, r24	; 6
		while ( ADCSRA & 0b01000000 ) ;	// Wait for completion
 370:	36 99       	sbic	0x06, 6	; 6
 372:	fe cf       	rjmp	.-4      	; 0x370 <main+0x274>
		
		upDownControl = ADCH;
 374:	05 b1       	in	r16, 0x05	; 5
 376:	10 e0       	ldi	r17, 0x00	; 0
		
		for (int i = 0; i < 64; i++) {
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	0f c0       	rjmp	.+30     	; 0x39c <main+0x2a0>
			liveValues[i] = values[i];
 37e:	c9 01       	movw	r24, r18
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	fc 01       	movw	r30, r24
 386:	e6 53       	subi	r30, 0x36	; 54
 388:	fd 4f       	sbci	r31, 0xFD	; 253
 38a:	40 81       	ld	r20, Z
 38c:	51 81       	ldd	r21, Z+1	; 0x01
 38e:	fc 01       	movw	r30, r24
 390:	e6 5b       	subi	r30, 0xB6	; 182
 392:	fd 4f       	sbci	r31, 0xFD	; 253
 394:	51 83       	std	Z+1, r21	; 0x01
 396:	40 83       	st	Z, r20
		ADCSRA |= 0b01000000;			// Start ADC
		while ( ADCSRA & 0b01000000 ) ;	// Wait for completion
		
		upDownControl = ADCH;
		
		for (int i = 0; i < 64; i++) {
 398:	2f 5f       	subi	r18, 0xFF	; 255
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	20 34       	cpi	r18, 0x40	; 64
 39e:	31 05       	cpc	r19, r1
 3a0:	74 f3       	brlt	.-36     	; 0x37e <main+0x282>
			liveValues[i] = values[i];
		}
		ptr[rotation](block);
 3a2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rotation>
 3a6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rotation+0x1>
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	4c 0f       	add	r20, r28
 3b4:	5d 1f       	adc	r21, r29
 3b6:	e4 0f       	add	r30, r20
 3b8:	f5 1f       	adc	r31, r21
 3ba:	01 90       	ld	r0, Z+
 3bc:	f0 81       	ld	r31, Z
 3be:	e0 2d       	mov	r30, r0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	09 95       	icall
		
		if (leftRightControl > 190)
 3c6:	5f eb       	ldi	r21, 0xBF	; 191
 3c8:	e5 16       	cp	r14, r21
 3ca:	f1 04       	cpc	r15, r1
 3cc:	6c f1       	brlt	.+90     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			// Right
			if (wallCheckRight(block))
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <wallCheckRight>
 3d6:	89 2b       	or	r24, r25
 3d8:	09 f4       	brne	.+2      	; 0x3dc <main+0x2e0>
 3da:	55 c0       	rjmp	.+170    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			{
				POS checkOffset;
				checkOffset.x = 1;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	c1 5b       	subi	r28, 0xB1	; 177
 3e2:	de 4f       	sbci	r29, 0xFE	; 254
 3e4:	99 83       	std	Y+1, r25	; 0x01
 3e6:	88 83       	st	Y, r24
 3e8:	cf 54       	subi	r28, 0x4F	; 79
 3ea:	d1 40       	sbci	r29, 0x01	; 1
				checkOffset.y = 0;
 3ec:	cf 5a       	subi	r28, 0xAF	; 175
 3ee:	de 4f       	sbci	r29, 0xFE	; 254
 3f0:	19 82       	std	Y+1, r1	; 0x01
 3f2:	18 82       	st	Y, r1
 3f4:	c1 55       	subi	r28, 0x51	; 81
 3f6:	d1 40       	sbci	r29, 0x01	; 1
				if (checkNextMove(values, block, checkOffset) == 0)
 3f8:	c1 5b       	subi	r28, 0xB1	; 177
 3fa:	de 4f       	sbci	r29, 0xFE	; 254
 3fc:	28 81       	ld	r18, Y
 3fe:	39 81       	ldd	r19, Y+1	; 0x01
 400:	4a 81       	ldd	r20, Y+2	; 0x02
 402:	5b 81       	ldd	r21, Y+3	; 0x03
 404:	cf 54       	subi	r28, 0x4F	; 79
 406:	d1 40       	sbci	r29, 0x01	; 1
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	71 e0       	ldi	r23, 0x01	; 1
 40c:	8a ec       	ldi	r24, 0xCA	; 202
 40e:	92 e0       	ldi	r25, 0x02	; 2
 410:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <checkNextMove>
 414:	89 2b       	or	r24, r25
 416:	b9 f5       	brne	.+110    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				{
					block[0].x++;
 418:	e0 e0       	ldi	r30, 0x00	; 0
 41a:	f1 e0       	ldi	r31, 0x01	; 1
 41c:	80 81       	ld	r24, Z
 41e:	91 81       	ldd	r25, Z+1	; 0x01
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	91 83       	std	Z+1, r25	; 0x01
 424:	80 83       	st	Z, r24
 426:	2f c0       	rjmp	.+94     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				}
			}
		} 
		else if (leftRightControl < 60)
 428:	9c e3       	ldi	r25, 0x3C	; 60
 42a:	e9 16       	cp	r14, r25
 42c:	f1 04       	cpc	r15, r1
 42e:	5c f5       	brge	.+86     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		{
			// Left
			if (wallCheckLeft(block))
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 56 06 	call	0xcac	; 0xcac <wallCheckLeft>
 438:	89 2b       	or	r24, r25
 43a:	29 f1       	breq	.+74     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			{
				POS checkOffset;
				checkOffset.x = -1;
 43c:	4f ef       	ldi	r20, 0xFF	; 255
 43e:	5f ef       	ldi	r21, 0xFF	; 255
 440:	cd 5a       	subi	r28, 0xAD	; 173
 442:	de 4f       	sbci	r29, 0xFE	; 254
 444:	59 83       	std	Y+1, r21	; 0x01
 446:	48 83       	st	Y, r20
 448:	c3 55       	subi	r28, 0x53	; 83
 44a:	d1 40       	sbci	r29, 0x01	; 1
				checkOffset.y = 0;
 44c:	cb 5a       	subi	r28, 0xAB	; 171
 44e:	de 4f       	sbci	r29, 0xFE	; 254
 450:	19 82       	std	Y+1, r1	; 0x01
 452:	18 82       	st	Y, r1
 454:	c5 55       	subi	r28, 0x55	; 85
 456:	d1 40       	sbci	r29, 0x01	; 1
				if (checkNextMove(values, block, checkOffset) == 0)
 458:	cd 5a       	subi	r28, 0xAD	; 173
 45a:	de 4f       	sbci	r29, 0xFE	; 254
 45c:	28 81       	ld	r18, Y
 45e:	39 81       	ldd	r19, Y+1	; 0x01
 460:	4a 81       	ldd	r20, Y+2	; 0x02
 462:	5b 81       	ldd	r21, Y+3	; 0x03
 464:	c3 55       	subi	r28, 0x53	; 83
 466:	d1 40       	sbci	r29, 0x01	; 1
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	71 e0       	ldi	r23, 0x01	; 1
 46c:	8a ec       	ldi	r24, 0xCA	; 202
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <checkNextMove>
 474:	89 2b       	or	r24, r25
 476:	39 f4       	brne	.+14     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				{
					block[0].x--;
 478:	e0 e0       	ldi	r30, 0x00	; 0
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	80 81       	ld	r24, Z
 47e:	91 81       	ldd	r25, Z+1	; 0x01
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	91 83       	std	Z+1, r25	; 0x01
 484:	80 83       	st	Z, r24
				}
			}
		}
		
		if (upDownControl > 190)
 486:	0f 3b       	cpi	r16, 0xBF	; 191
 488:	11 05       	cpc	r17, r1
 48a:	0c f4       	brge	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	51 c0       	rjmp	.+162    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		{
			// Up
			int oldRotation = rotation;
 48e:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <rotation>
 492:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <rotation+0x1>
			rotation++;
 496:	c8 01       	movw	r24, r16
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rotation+0x1>
 49e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rotation>
			if (rotation >= 4) {
 4a2:	04 97       	sbiw	r24, 0x04	; 4
 4a4:	24 f0       	brlt	.+8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
				rotation = 0;
 4a6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rotation+0x1>
 4aa:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rotation>
			}
			ptr[rotation](block);
 4ae:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rotation>
 4b2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rotation+0x1>
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	8c 0f       	add	r24, r28
 4c0:	9d 1f       	adc	r25, r29
 4c2:	e8 0f       	add	r30, r24
 4c4:	f9 1f       	adc	r31, r25
 4c6:	01 90       	ld	r0, Z+
 4c8:	f0 81       	ld	r31, Z
 4ca:	e0 2d       	mov	r30, r0
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	09 95       	icall
			POS checkOffset;
			checkOffset.x = 0;
 4d2:	81 2c       	mov	r8, r1
 4d4:	91 2c       	mov	r9, r1
			checkOffset.y = 0;
 4d6:	a1 2c       	mov	r10, r1
 4d8:	b1 2c       	mov	r11, r1
			if (checkNextMove(values, block, checkOffset) > 0 ||
 4da:	a5 01       	movw	r20, r10
 4dc:	94 01       	movw	r18, r8
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	71 e0       	ldi	r23, 0x01	; 1
 4e2:	8a ec       	ldi	r24, 0xCA	; 202
 4e4:	92 e0       	ldi	r25, 0x02	; 2
 4e6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <checkNextMove>
 4ea:	18 16       	cp	r1, r24
 4ec:	19 06       	cpc	r1, r25
 4ee:	6c f0       	brlt	.+26     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				!(wallCheckLeftTurn(block) && wallCheckRightTurn(block)))
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	0e 94 2c 06 	call	0xc58	; 0xc58 <wallCheckLeftTurn>
			}
			ptr[rotation](block);
			POS checkOffset;
			checkOffset.x = 0;
			checkOffset.y = 0;
			if (checkNextMove(values, block, checkOffset) > 0 ||
 4f8:	89 2b       	or	r24, r25
 4fa:	39 f0       	breq	.+14     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				!(wallCheckLeftTurn(block) && wallCheckRightTurn(block)))
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 02 06 	call	0xc04	; 0xc04 <wallCheckRightTurn>
 504:	89 2b       	or	r24, r25
 506:	09 f0       	breq	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 508:	77 c0       	rjmp	.+238    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
			{
				rotation = oldRotation;
 50a:	10 93 11 01 	sts	0x0111, r17	; 0x800111 <rotation+0x1>
 50e:	00 93 10 01 	sts	0x0110, r16	; 0x800110 <rotation>
				ptr[rotation](block);
 512:	00 0f       	add	r16, r16
 514:	11 1f       	adc	r17, r17
 516:	e1 e0       	ldi	r30, 0x01	; 1
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	ec 0f       	add	r30, r28
 51c:	fd 1f       	adc	r31, r29
 51e:	e0 0f       	add	r30, r16
 520:	f1 1f       	adc	r31, r17
 522:	01 90       	ld	r0, Z+
 524:	f0 81       	ld	r31, Z
 526:	e0 2d       	mov	r30, r0
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	09 95       	icall
 52e:	64 c0       	rjmp	.+200    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
			}
		}
		else if (upDownControl < 60)
 530:	0c 33       	cpi	r16, 0x3C	; 60
 532:	11 05       	cpc	r17, r1
 534:	0c f0       	brlt	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 536:	60 c0       	rjmp	.+192    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		{
			// Down
			int oldRotation = rotation;
 538:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <rotation>
 53c:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <rotation+0x1>
			rotation--;
 540:	c8 01       	movw	r24, r16
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rotation+0x1>
 548:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rotation>
			if (rotation <= -1) {
 54c:	99 23       	and	r25, r25
 54e:	34 f4       	brge	.+12     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
				rotation = 3;
 550:	83 e0       	ldi	r24, 0x03	; 3
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rotation+0x1>
 558:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rotation>
			}
			ptr[rotation](block);
 55c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rotation>
 560:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rotation+0x1>
 564:	ee 0f       	add	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	4c 0f       	add	r20, r28
 56e:	5d 1f       	adc	r21, r29
 570:	e4 0f       	add	r30, r20
 572:	f5 1f       	adc	r31, r21
 574:	01 90       	ld	r0, Z+
 576:	f0 81       	ld	r31, Z
 578:	e0 2d       	mov	r30, r0
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	09 95       	icall
			POS checkOffset;
			checkOffset.x = 0;
 580:	c9 5a       	subi	r28, 0xA9	; 169
 582:	de 4f       	sbci	r29, 0xFE	; 254
 584:	19 82       	std	Y+1, r1	; 0x01
 586:	18 82       	st	Y, r1
 588:	c7 55       	subi	r28, 0x57	; 87
 58a:	d1 40       	sbci	r29, 0x01	; 1
			checkOffset.y = 0;
 58c:	c7 5a       	subi	r28, 0xA7	; 167
 58e:	de 4f       	sbci	r29, 0xFE	; 254
 590:	19 82       	std	Y+1, r1	; 0x01
 592:	18 82       	st	Y, r1
 594:	c9 55       	subi	r28, 0x59	; 89
 596:	d1 40       	sbci	r29, 0x01	; 1
			if (checkNextMove(values, block, checkOffset) > 0 ||
 598:	c9 5a       	subi	r28, 0xA9	; 169
 59a:	de 4f       	sbci	r29, 0xFE	; 254
 59c:	28 81       	ld	r18, Y
 59e:	39 81       	ldd	r19, Y+1	; 0x01
 5a0:	4a 81       	ldd	r20, Y+2	; 0x02
 5a2:	5b 81       	ldd	r21, Y+3	; 0x03
 5a4:	c7 55       	subi	r28, 0x57	; 87
 5a6:	d1 40       	sbci	r29, 0x01	; 1
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	8a ec       	ldi	r24, 0xCA	; 202
 5ae:	92 e0       	ldi	r25, 0x02	; 2
 5b0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <checkNextMove>
 5b4:	18 16       	cp	r1, r24
 5b6:	19 06       	cpc	r1, r25
 5b8:	64 f0       	brlt	.+24     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
				!(wallCheckLeftTurn(block) && wallCheckRightTurn(block)))
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	0e 94 2c 06 	call	0xc58	; 0xc58 <wallCheckLeftTurn>
			}
			ptr[rotation](block);
			POS checkOffset;
			checkOffset.x = 0;
			checkOffset.y = 0;
			if (checkNextMove(values, block, checkOffset) > 0 ||
 5c2:	89 2b       	or	r24, r25
 5c4:	31 f0       	breq	.+12     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
				!(wallCheckLeftTurn(block) && wallCheckRightTurn(block)))
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	0e 94 02 06 	call	0xc04	; 0xc04 <wallCheckRightTurn>
 5ce:	89 2b       	or	r24, r25
 5d0:	99 f4       	brne	.+38     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
			{
				rotation = oldRotation;
 5d2:	10 93 11 01 	sts	0x0111, r17	; 0x800111 <rotation+0x1>
 5d6:	00 93 10 01 	sts	0x0110, r16	; 0x800110 <rotation>
				ptr[rotation](block);
 5da:	f8 01       	movw	r30, r16
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	8c 0f       	add	r24, r28
 5e6:	9d 1f       	adc	r25, r29
 5e8:	e8 0f       	add	r30, r24
 5ea:	f9 1f       	adc	r31, r25
 5ec:	01 90       	ld	r0, Z+
 5ee:	f0 81       	ld	r31, Z
 5f0:	e0 2d       	mov	r30, r0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	09 95       	icall
			}
		}
		
		// 0x3D == 15625
		if (TCNT1 >= 12625) {
 5f8:	8c b5       	in	r24, 0x2c	; 44
 5fa:	9d b5       	in	r25, 0x2d	; 45
 5fc:	81 35       	cpi	r24, 0x51	; 81
 5fe:	91 43       	sbci	r25, 0x31	; 49
 600:	08 f4       	brcc	.+2      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 602:	b0 c0       	rjmp	.+352    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			TCNT1 = 0;
 604:	1d bc       	out	0x2d, r1	; 45
 606:	1c bc       	out	0x2c, r1	; 44
			if (isSinking)
 608:	c1 14       	cp	r12, r1
 60a:	d1 04       	cpc	r13, r1
 60c:	51 f1       	breq	.+84     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
			{
				POS checkOffset;
				checkOffset.x = 0;
 60e:	41 2c       	mov	r4, r1
 610:	51 2c       	mov	r5, r1
				checkOffset.y = 1;
 612:	66 24       	eor	r6, r6
 614:	63 94       	inc	r6
 616:	71 2c       	mov	r7, r1
				if (checkNextMove(values, block, checkOffset))
 618:	a3 01       	movw	r20, r6
 61a:	92 01       	movw	r18, r4
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	71 e0       	ldi	r23, 0x01	; 1
 620:	8a ec       	ldi	r24, 0xCA	; 202
 622:	92 e0       	ldi	r25, 0x02	; 2
 624:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <checkNextMove>
 628:	89 2b       	or	r24, r25
 62a:	79 f0       	breq	.+30     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
				{
					isSinking=0;
					drawShape(liveValues, block);
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	71 e0       	ldi	r23, 0x01	; 1
 630:	8a e4       	ldi	r24, 0x4A	; 74
 632:	92 e0       	ldi	r25, 0x02	; 2
 634:	0e 94 6b 05 	call	0xad6	; 0xad6 <drawShape>
					drawShape(values, block);
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	71 e0       	ldi	r23, 0x01	; 1
 63c:	8a ec       	ldi	r24, 0xCA	; 202
 63e:	92 e0       	ldi	r25, 0x02	; 2
 640:	0e 94 6b 05 	call	0xad6	; 0xad6 <drawShape>
				POS checkOffset;
				checkOffset.x = 0;
				checkOffset.y = 1;
				if (checkNextMove(values, block, checkOffset))
				{
					isSinking=0;
 644:	c1 2c       	mov	r12, r1
 646:	d1 2c       	mov	r13, r1
 648:	0c c0       	rjmp	.+24     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
					drawShape(liveValues, block);
					drawShape(values, block);
				}
				else
				{
					block[0].y++;
 64a:	e0 e0       	ldi	r30, 0x00	; 0
 64c:	f1 e0       	ldi	r31, 0x01	; 1
 64e:	82 81       	ldd	r24, Z+2	; 0x02
 650:	93 81       	ldd	r25, Z+3	; 0x03
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	93 83       	std	Z+3, r25	; 0x03
 656:	82 83       	std	Z+2, r24	; 0x02
					drawShape(liveValues, block);
 658:	bf 01       	movw	r22, r30
 65a:	8a e4       	ldi	r24, 0x4A	; 74
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	0e 94 6b 05 	call	0xad6	; 0xad6 <drawShape>
				}
			}
		
			for (int i = 0; i<7; i++)
 662:	e1 2c       	mov	r14, r1
 664:	f1 2c       	mov	r15, r1
 666:	13 c0       	rjmp	.+38     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
			{
				if (checkFullLine(values, 8-i)) {
 668:	08 e0       	ldi	r16, 0x08	; 8
 66a:	10 e0       	ldi	r17, 0x00	; 0
 66c:	0e 19       	sub	r16, r14
 66e:	1f 09       	sbc	r17, r15
 670:	b8 01       	movw	r22, r16
 672:	8a ec       	ldi	r24, 0xCA	; 202
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	0e 94 1f 05 	call	0xa3e	; 0xa3e <checkFullLine>
 67a:	89 2b       	or	r24, r25
 67c:	29 f0       	breq	.+10     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
					clearAndMoveLine(values, 8-i);
 67e:	b8 01       	movw	r22, r16
 680:	8a ec       	ldi	r24, 0xCA	; 202
 682:	92 e0       	ldi	r25, 0x02	; 2
 684:	0e 94 a6 05 	call	0xb4c	; 0xb4c <clearAndMoveLine>
					block[0].y++;
					drawShape(liveValues, block);
				}
			}
		
			for (int i = 0; i<7; i++)
 688:	4f ef       	ldi	r20, 0xFF	; 255
 68a:	e4 1a       	sub	r14, r20
 68c:	f4 0a       	sbc	r15, r20
 68e:	57 e0       	ldi	r21, 0x07	; 7
 690:	e5 16       	cp	r14, r21
 692:	f1 04       	cpc	r15, r1
 694:	4c f3       	brlt	.-46     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
				if (checkFullLine(values, 8-i)) {
					clearAndMoveLine(values, 8-i);
				}
			}
		
			if (isSinking == 0)
 696:	c1 14       	cp	r12, r1
 698:	d1 04       	cpc	r13, r1
 69a:	09 f0       	breq	.+2      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 69c:	69 c0       	rjmp	.+210    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
			{
				if (checkEmptyLine(values, 1))
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	8a ec       	ldi	r24, 0xCA	; 202
 6a4:	92 e0       	ldi	r25, 0x02	; 2
 6a6:	0e 94 c1 03 	call	0x782	; 0x782 <checkEmptyLine>
 6aa:	89 2b       	or	r24, r25
 6ac:	39 f1       	breq	.+78     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
				{	
					int gameoverValues[64] = {
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	ea e4       	ldi	r30, 0x4A	; 74
 6b2:	f1 e0       	ldi	r31, 0x01	; 1
 6b4:	de 01       	movw	r26, r28
 6b6:	a1 53       	subi	r26, 0x31	; 49
 6b8:	bf 4f       	sbci	r27, 0xFF	; 255
 6ba:	01 90       	ld	r0, Z+
 6bc:	0d 92       	st	X+, r0
 6be:	8a 95       	dec	r24
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
						0, 1, 0, 1, 1, 0, 1, 0,
						0, 1, 0, 0, 0, 0, 1, 0,
						0, 1, 1, 1, 1, 1, 1, 0,
						0, 0, 0, 0, 0, 0, 0, 0,
					};
					int gameoverValues2[64] = {
 6c2:	80 e8       	ldi	r24, 0x80	; 128
 6c4:	ea ec       	ldi	r30, 0xCA	; 202
 6c6:	f1 e0       	ldi	r31, 0x01	; 1
 6c8:	de 01       	movw	r26, r28
 6ca:	a1 5b       	subi	r26, 0xB1	; 177
 6cc:	bf 4f       	sbci	r27, 0xFF	; 255
 6ce:	01 90       	ld	r0, Z+
 6d0:	0d 92       	st	X+, r0
 6d2:	8a 95       	dec	r24
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
						1, 0, 1, 1, 1, 1, 0, 1,
						1, 0, 0, 0, 0, 0, 0, 1,
						1, 1, 1, 1, 1, 1, 1, 1,
					};
					while(1){
						value_to_display(gameoverValues);
 6d6:	ce 01       	movw	r24, r28
 6d8:	81 53       	subi	r24, 0x31	; 49
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	0e 94 ce 04 	call	0x99c	; 0x99c <value_to_display>
						wait(500);
 6e0:	84 ef       	ldi	r24, 0xF4	; 244
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	0e 94 1b 09 	call	0x1236	; 0x1236 <wait>
						value_to_display(gameoverValues2);
 6e8:	ce 01       	movw	r24, r28
 6ea:	81 5b       	subi	r24, 0xB1	; 177
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	0e 94 ce 04 	call	0x99c	; 0x99c <value_to_display>
						wait(500);
 6f2:	84 ef       	ldi	r24, 0xF4	; 244
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	0e 94 1b 09 	call	0x1236	; 0x1236 <wait>
 6fa:	ed cf       	rjmp	.-38     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
					}
				}
				block[0].x = 4;
 6fc:	e0 e0       	ldi	r30, 0x00	; 0
 6fe:	f1 e0       	ldi	r31, 0x01	; 1
 700:	84 e0       	ldi	r24, 0x04	; 4
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	91 83       	std	Z+1, r25	; 0x01
 706:	80 83       	st	Z, r24
				block[0].y = 1;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	93 83       	std	Z+3, r25	; 0x03
 70e:	82 83       	std	Z+2, r24	; 0x02
				rotation = 0;
 710:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rotation+0x1>
 714:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rotation>
				isSinking = 1;
				int number = ((rand() % (7 - 1 + 1)) + 1) - 1;
 718:	0e 94 6e 04 	call	0x8dc	; 0x8dc <rand>
 71c:	67 e0       	ldi	r22, 0x07	; 7
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	0e 94 79 07 	call	0xef2	; 0xef2 <__divmodhi4>
				ptr[0] = ptrptr[number][0];
 724:	fc 01       	movw	r30, r24
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	81 e4       	ldi	r24, 0x41	; 65
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	8c 0f       	add	r24, r28
 730:	9d 1f       	adc	r25, r29
 732:	e8 0f       	add	r30, r24
 734:	f9 1f       	adc	r31, r25
 736:	01 90       	ld	r0, Z+
 738:	f0 81       	ld	r31, Z
 73a:	e0 2d       	mov	r30, r0
 73c:	80 81       	ld	r24, Z
 73e:	91 81       	ldd	r25, Z+1	; 0x01
 740:	9a 83       	std	Y+2, r25	; 0x02
 742:	89 83       	std	Y+1, r24	; 0x01
				ptr[1] = ptrptr[number][1];
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
 748:	9c 83       	std	Y+4, r25	; 0x04
 74a:	8b 83       	std	Y+3, r24	; 0x03
				ptr[2] = ptrptr[number][2];
 74c:	84 81       	ldd	r24, Z+4	; 0x04
 74e:	95 81       	ldd	r25, Z+5	; 0x05
 750:	9e 83       	std	Y+6, r25	; 0x06
 752:	8d 83       	std	Y+5, r24	; 0x05
				ptr[3] = ptrptr[number][3];
 754:	86 81       	ldd	r24, Z+6	; 0x06
 756:	97 81       	ldd	r25, Z+7	; 0x07
 758:	98 87       	std	Y+8, r25	; 0x08
 75a:	8f 83       	std	Y+7, r24	; 0x07
					}
				}
				block[0].x = 4;
				block[0].y = 1;
				rotation = 0;
				isSinking = 1;
 75c:	cc 24       	eor	r12, r12
 75e:	c3 94       	inc	r12
 760:	d1 2c       	mov	r13, r1
 762:	06 c0       	rjmp	.+12     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
				ptr[1] = ptrptr[number][1];
				ptr[2] = ptrptr[number][2];
				ptr[3] = ptrptr[number][3];
			}
		} else {
			drawShape(liveValues, block);		
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	71 e0       	ldi	r23, 0x01	; 1
 768:	8a e4       	ldi	r24, 0x4A	; 74
 76a:	92 e0       	ldi	r25, 0x02	; 2
 76c:	0e 94 6b 05 	call	0xad6	; 0xad6 <drawShape>
		}

		value_to_display(liveValues);
 770:	8a e4       	ldi	r24, 0x4A	; 74
 772:	92 e0       	ldi	r25, 0x02	; 2
 774:	0e 94 ce 04 	call	0x99c	; 0x99c <value_to_display>
	
		wait(100);
 778:	84 e6       	ldi	r24, 0x64	; 100
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 1b 09 	call	0x1236	; 0x1236 <wait>
	}
 780:	e9 cd       	rjmp	.-1070   	; 0x354 <main+0x258>

Disassembly of section .text.makeShapeO:

00000f42 <makeShapeO>:
 * Created: 30-3-2022 14:49:53
 *  Author: raoul
 */ 
#include "shapes.h"
void makeShapeO(POS block[4])
{
 f42:	fc 01       	movw	r30, r24
	block[1].x = 0;
 f44:	15 82       	std	Z+5, r1	; 0x05
 f46:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = -1;
 f48:	2f ef       	ldi	r18, 0xFF	; 255
 f4a:	3f ef       	ldi	r19, 0xFF	; 255
 f4c:	37 83       	std	Z+7, r19	; 0x07
 f4e:	26 83       	std	Z+6, r18	; 0x06
	block[2].x = 1;
 f50:	81 e0       	ldi	r24, 0x01	; 1
 f52:	90 e0       	ldi	r25, 0x00	; 0
 f54:	91 87       	std	Z+9, r25	; 0x09
 f56:	80 87       	std	Z+8, r24	; 0x08
	block[2].y = -1;
 f58:	33 87       	std	Z+11, r19	; 0x0b
 f5a:	22 87       	std	Z+10, r18	; 0x0a
	block[3].x = 1;
 f5c:	95 87       	std	Z+13, r25	; 0x0d
 f5e:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
 f60:	17 86       	std	Z+15, r1	; 0x0f
 f62:	16 86       	std	Z+14, r1	; 0x0e
 f64:	08 95       	ret

Disassembly of section .text.makeShapeI2:

00000e52 <makeShapeI2>:
}

void makeShapeI2(POS block[4])
{
 e52:	fc 01       	movw	r30, r24
	block[1].x = 0;
 e54:	15 82       	std	Z+5, r1	; 0x05
 e56:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = 1;
 e58:	81 e0       	ldi	r24, 0x01	; 1
 e5a:	90 e0       	ldi	r25, 0x00	; 0
 e5c:	97 83       	std	Z+7, r25	; 0x07
 e5e:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 0;
 e60:	11 86       	std	Z+9, r1	; 0x09
 e62:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = 2;
 e64:	82 e0       	ldi	r24, 0x02	; 2
 e66:	90 e0       	ldi	r25, 0x00	; 0
 e68:	93 87       	std	Z+11, r25	; 0x0b
 e6a:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = 0;
 e6c:	15 86       	std	Z+13, r1	; 0x0d
 e6e:	14 86       	std	Z+12, r1	; 0x0c
	block[3].y = -1;
 e70:	8f ef       	ldi	r24, 0xFF	; 255
 e72:	9f ef       	ldi	r25, 0xFF	; 255
 e74:	97 87       	std	Z+15, r25	; 0x0f
 e76:	86 87       	std	Z+14, r24	; 0x0e
 e78:	08 95       	ret

Disassembly of section .text.makeShapeI1:

00000e7a <makeShapeI1>:
}

void makeShapeI1(POS block[4])
{
 e7a:	fc 01       	movw	r30, r24
	block[1].x = 1;
 e7c:	81 e0       	ldi	r24, 0x01	; 1
 e7e:	90 e0       	ldi	r25, 0x00	; 0
 e80:	95 83       	std	Z+5, r25	; 0x05
 e82:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
 e84:	17 82       	std	Z+7, r1	; 0x07
 e86:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 2;
 e88:	82 e0       	ldi	r24, 0x02	; 2
 e8a:	90 e0       	ldi	r25, 0x00	; 0
 e8c:	91 87       	std	Z+9, r25	; 0x09
 e8e:	80 87       	std	Z+8, r24	; 0x08
	block[2].y = 0;
 e90:	13 86       	std	Z+11, r1	; 0x0b
 e92:	12 86       	std	Z+10, r1	; 0x0a
	block[3].x = -1;
 e94:	8f ef       	ldi	r24, 0xFF	; 255
 e96:	9f ef       	ldi	r25, 0xFF	; 255
 e98:	95 87       	std	Z+13, r25	; 0x0d
 e9a:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
 e9c:	17 86       	std	Z+15, r1	; 0x0f
 e9e:	16 86       	std	Z+14, r1	; 0x0e
 ea0:	08 95       	ret

Disassembly of section .text.makeShapeI4:

00000ea2 <makeShapeI4>:
}

void makeShapeI4(POS block[4])
{
 ea2:	fc 01       	movw	r30, r24
	block[1].x = 0;
 ea4:	15 82       	std	Z+5, r1	; 0x05
 ea6:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = -1;
 ea8:	8f ef       	ldi	r24, 0xFF	; 255
 eaa:	9f ef       	ldi	r25, 0xFF	; 255
 eac:	97 83       	std	Z+7, r25	; 0x07
 eae:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 0;
 eb0:	11 86       	std	Z+9, r1	; 0x09
 eb2:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -2;
 eb4:	8e ef       	ldi	r24, 0xFE	; 254
 eb6:	9f ef       	ldi	r25, 0xFF	; 255
 eb8:	93 87       	std	Z+11, r25	; 0x0b
 eba:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = 0;
 ebc:	15 86       	std	Z+13, r1	; 0x0d
 ebe:	14 86       	std	Z+12, r1	; 0x0c
	block[3].y = 1;
 ec0:	81 e0       	ldi	r24, 0x01	; 1
 ec2:	90 e0       	ldi	r25, 0x00	; 0
 ec4:	97 87       	std	Z+15, r25	; 0x0f
 ec6:	86 87       	std	Z+14, r24	; 0x0e
 ec8:	08 95       	ret

Disassembly of section .text.makeShapeI3:

00000eca <makeShapeI3>:
}

void makeShapeI3(POS block[4])
{
 eca:	fc 01       	movw	r30, r24
	block[1].x = -1;
 ecc:	8f ef       	ldi	r24, 0xFF	; 255
 ece:	9f ef       	ldi	r25, 0xFF	; 255
 ed0:	95 83       	std	Z+5, r25	; 0x05
 ed2:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
 ed4:	17 82       	std	Z+7, r1	; 0x07
 ed6:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = -2;
 ed8:	8e ef       	ldi	r24, 0xFE	; 254
 eda:	9f ef       	ldi	r25, 0xFF	; 255
 edc:	91 87       	std	Z+9, r25	; 0x09
 ede:	80 87       	std	Z+8, r24	; 0x08
	block[2].y = 0;
 ee0:	13 86       	std	Z+11, r1	; 0x0b
 ee2:	12 86       	std	Z+10, r1	; 0x0a
	block[3].x = 1;
 ee4:	81 e0       	ldi	r24, 0x01	; 1
 ee6:	90 e0       	ldi	r25, 0x00	; 0
 ee8:	95 87       	std	Z+13, r25	; 0x0d
 eea:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
 eec:	17 86       	std	Z+15, r1	; 0x0f
 eee:	16 86       	std	Z+14, r1	; 0x0e
 ef0:	08 95       	ret

Disassembly of section .text.makeShapeT1:

00000f66 <makeShapeT1>:
}

void makeShapeT1(POS block[4])
{
 f66:	fc 01       	movw	r30, r24
	block[1].x = 1;
 f68:	81 e0       	ldi	r24, 0x01	; 1
 f6a:	90 e0       	ldi	r25, 0x00	; 0
 f6c:	95 83       	std	Z+5, r25	; 0x05
 f6e:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
 f70:	17 82       	std	Z+7, r1	; 0x07
 f72:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 0;
 f74:	11 86       	std	Z+9, r1	; 0x09
 f76:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -1;
 f78:	8f ef       	ldi	r24, 0xFF	; 255
 f7a:	9f ef       	ldi	r25, 0xFF	; 255
 f7c:	93 87       	std	Z+11, r25	; 0x0b
 f7e:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = -1;
 f80:	95 87       	std	Z+13, r25	; 0x0d
 f82:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
 f84:	17 86       	std	Z+15, r1	; 0x0f
 f86:	16 86       	std	Z+14, r1	; 0x0e
 f88:	08 95       	ret

Disassembly of section .text.makeShapeT2:

00000f8a <makeShapeT2>:
}

void makeShapeT2(POS block[4])
{
 f8a:	fc 01       	movw	r30, r24
	block[1].x = 0;
 f8c:	15 82       	std	Z+5, r1	; 0x05
 f8e:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = -1;
 f90:	8f ef       	ldi	r24, 0xFF	; 255
 f92:	9f ef       	ldi	r25, 0xFF	; 255
 f94:	97 83       	std	Z+7, r25	; 0x07
 f96:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 0;
 f98:	11 86       	std	Z+9, r1	; 0x09
 f9a:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = 1;
 f9c:	81 e0       	ldi	r24, 0x01	; 1
 f9e:	90 e0       	ldi	r25, 0x00	; 0
 fa0:	93 87       	std	Z+11, r25	; 0x0b
 fa2:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = 1;
 fa4:	95 87       	std	Z+13, r25	; 0x0d
 fa6:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
 fa8:	17 86       	std	Z+15, r1	; 0x0f
 faa:	16 86       	std	Z+14, r1	; 0x0e
 fac:	08 95       	ret

Disassembly of section .text.makeShapeT3:

00000fae <makeShapeT3>:
}

void makeShapeT3(POS block[4])
{
 fae:	fc 01       	movw	r30, r24
	block[1].x = 1;
 fb0:	81 e0       	ldi	r24, 0x01	; 1
 fb2:	90 e0       	ldi	r25, 0x00	; 0
 fb4:	95 83       	std	Z+5, r25	; 0x05
 fb6:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
 fb8:	17 82       	std	Z+7, r1	; 0x07
 fba:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = -1;
 fbc:	2f ef       	ldi	r18, 0xFF	; 255
 fbe:	3f ef       	ldi	r19, 0xFF	; 255
 fc0:	31 87       	std	Z+9, r19	; 0x09
 fc2:	20 87       	std	Z+8, r18	; 0x08
	block[2].y = 0;
 fc4:	13 86       	std	Z+11, r1	; 0x0b
 fc6:	12 86       	std	Z+10, r1	; 0x0a
	block[3].x = 0;
 fc8:	15 86       	std	Z+13, r1	; 0x0d
 fca:	14 86       	std	Z+12, r1	; 0x0c
	block[3].y = 1;
 fcc:	97 87       	std	Z+15, r25	; 0x0f
 fce:	86 87       	std	Z+14, r24	; 0x0e
 fd0:	08 95       	ret

Disassembly of section .text.makeShapeT4:

00000fd2 <makeShapeT4>:
}

void makeShapeT4(POS block[4])
{
 fd2:	fc 01       	movw	r30, r24
	block[1].x = 0;
 fd4:	15 82       	std	Z+5, r1	; 0x05
 fd6:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = 1;
 fd8:	81 e0       	ldi	r24, 0x01	; 1
 fda:	90 e0       	ldi	r25, 0x00	; 0
 fdc:	97 83       	std	Z+7, r25	; 0x07
 fde:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 0;
 fe0:	11 86       	std	Z+9, r1	; 0x09
 fe2:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -1;
 fe4:	8f ef       	ldi	r24, 0xFF	; 255
 fe6:	9f ef       	ldi	r25, 0xFF	; 255
 fe8:	93 87       	std	Z+11, r25	; 0x0b
 fea:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = -1;
 fec:	95 87       	std	Z+13, r25	; 0x0d
 fee:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
 ff0:	17 86       	std	Z+15, r1	; 0x0f
 ff2:	16 86       	std	Z+14, r1	; 0x0e
 ff4:	08 95       	ret

Disassembly of section .text.makeShapeS1:

00000ff6 <makeShapeS1>:
}

void makeShapeS1(POS block[4])
{
     ff6:	fc 01       	movw	r30, r24
	block[1].x = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	95 83       	std	Z+5, r25	; 0x05
     ffe:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = -1;
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	97 83       	std	Z+7, r25	; 0x07
    1006:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 0;
    1008:	11 86       	std	Z+9, r1	; 0x09
    100a:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -1;
    100c:	93 87       	std	Z+11, r25	; 0x0b
    100e:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = -1;
    1010:	95 87       	std	Z+13, r25	; 0x0d
    1012:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
    1014:	17 86       	std	Z+15, r1	; 0x0f
    1016:	16 86       	std	Z+14, r1	; 0x0e
    1018:	08 95       	ret

Disassembly of section .text.makeShapeS2:

0000101a <makeShapeS2>:
}

void makeShapeS2(POS block[4])
{
    101a:	fc 01       	movw	r30, r24
	block[1].x = 0;
    101c:	15 82       	std	Z+5, r1	; 0x05
    101e:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = -1;
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	97 83       	std	Z+7, r25	; 0x07
    1026:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	91 87       	std	Z+9, r25	; 0x09
    102e:	80 87       	std	Z+8, r24	; 0x08
	block[2].y = 0;
    1030:	13 86       	std	Z+11, r1	; 0x0b
    1032:	12 86       	std	Z+10, r1	; 0x0a
	block[3].x = 1;
    1034:	95 87       	std	Z+13, r25	; 0x0d
    1036:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 1;
    1038:	97 87       	std	Z+15, r25	; 0x0f
    103a:	86 87       	std	Z+14, r24	; 0x0e
    103c:	08 95       	ret

Disassembly of section .text.makeShapeS3:

0000103e <makeShapeS3>:
}

void makeShapeS3(POS block[4])
{
    103e:	fc 01       	movw	r30, r24
	block[1].x = 1;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	95 83       	std	Z+5, r25	; 0x05
    1046:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
    1048:	17 82       	std	Z+7, r1	; 0x07
    104a:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 0;
    104c:	11 86       	std	Z+9, r1	; 0x09
    104e:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = 1;
    1050:	93 87       	std	Z+11, r25	; 0x0b
    1052:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = -1;
    1054:	2f ef       	ldi	r18, 0xFF	; 255
    1056:	3f ef       	ldi	r19, 0xFF	; 255
    1058:	35 87       	std	Z+13, r19	; 0x0d
    105a:	24 87       	std	Z+12, r18	; 0x0c
	block[3].y = 1;
    105c:	97 87       	std	Z+15, r25	; 0x0f
    105e:	86 87       	std	Z+14, r24	; 0x0e
    1060:	08 95       	ret

Disassembly of section .text.makeShapeS4:

00001062 <makeShapeS4>:
}

void makeShapeS4(POS block[4])
{
    1062:	fc 01       	movw	r30, r24
	block[1].x = -1;
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	9f ef       	ldi	r25, 0xFF	; 255
    1068:	95 83       	std	Z+5, r25	; 0x05
    106a:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
    106c:	17 82       	std	Z+7, r1	; 0x07
    106e:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 0;
    1070:	11 86       	std	Z+9, r1	; 0x09
    1072:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = 1;
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	33 87       	std	Z+11, r19	; 0x0b
    107a:	22 87       	std	Z+10, r18	; 0x0a
	block[3].x = -1;
    107c:	95 87       	std	Z+13, r25	; 0x0d
    107e:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = -1;
    1080:	97 87       	std	Z+15, r25	; 0x0f
    1082:	86 87       	std	Z+14, r24	; 0x0e
    1084:	08 95       	ret

Disassembly of section .text.makeShapeZ1:

00001086 <makeShapeZ1>:
}

void makeShapeZ1(POS block[4])
{
    1086:	fc 01       	movw	r30, r24
	block[1].x = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	95 83       	std	Z+5, r25	; 0x05
    108e:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
    1090:	17 82       	std	Z+7, r1	; 0x07
    1092:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 0;
    1094:	11 86       	std	Z+9, r1	; 0x09
    1096:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -1;
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	93 87       	std	Z+11, r25	; 0x0b
    109e:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = -1;
    10a0:	95 87       	std	Z+13, r25	; 0x0d
    10a2:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = -1;
    10a4:	97 87       	std	Z+15, r25	; 0x0f
    10a6:	86 87       	std	Z+14, r24	; 0x0e
    10a8:	08 95       	ret

Disassembly of section .text.makeShapeZ2:

000010aa <makeShapeZ2>:
}

void makeShapeZ2(POS block[4])
{
    10aa:	fc 01       	movw	r30, r24
	block[1].x = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	95 83       	std	Z+5, r25	; 0x05
    10b2:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
    10b4:	17 82       	std	Z+7, r1	; 0x07
    10b6:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 0;
    10b8:	11 86       	std	Z+9, r1	; 0x09
    10ba:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = 1;
    10bc:	93 87       	std	Z+11, r25	; 0x0b
    10be:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = 1;
    10c0:	95 87       	std	Z+13, r25	; 0x0d
    10c2:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = -1;
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	9f ef       	ldi	r25, 0xFF	; 255
    10c8:	97 87       	std	Z+15, r25	; 0x0f
    10ca:	86 87       	std	Z+14, r24	; 0x0e
    10cc:	08 95       	ret

Disassembly of section .text.makeShapeZ3:

000010ce <makeShapeZ3>:
}

void makeShapeZ3(POS block[4])
{
    10ce:	fc 01       	movw	r30, r24
	block[1].x = -1;
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	9f ef       	ldi	r25, 0xFF	; 255
    10d4:	95 83       	std	Z+5, r25	; 0x05
    10d6:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
    10d8:	17 82       	std	Z+7, r1	; 0x07
    10da:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 0;
    10dc:	11 86       	std	Z+9, r1	; 0x09
    10de:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	93 87       	std	Z+11, r25	; 0x0b
    10e6:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = 1;
    10e8:	95 87       	std	Z+13, r25	; 0x0d
    10ea:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 1;
    10ec:	97 87       	std	Z+15, r25	; 0x0f
    10ee:	86 87       	std	Z+14, r24	; 0x0e
    10f0:	08 95       	ret

Disassembly of section .text.makeShapeZ4:

000010f2 <makeShapeZ4>:
}

void makeShapeZ4(POS block[4])
{
    10f2:	fc 01       	movw	r30, r24
	block[1].x = -1;
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	95 83       	std	Z+5, r25	; 0x05
    10fa:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
    10fc:	17 82       	std	Z+7, r1	; 0x07
    10fe:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 0;
    1100:	11 86       	std	Z+9, r1	; 0x09
    1102:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -1;
    1104:	93 87       	std	Z+11, r25	; 0x0b
    1106:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = -1;
    1108:	95 87       	std	Z+13, r25	; 0x0d
    110a:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	97 87       	std	Z+15, r25	; 0x0f
    1112:	86 87       	std	Z+14, r24	; 0x0e
    1114:	08 95       	ret

Disassembly of section .text.makeShapeJ1:

00001116 <makeShapeJ1>:
}

void makeShapeJ1(POS block[4])
{
    1116:	fc 01       	movw	r30, r24
	block[1].x = -1;
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	9f ef       	ldi	r25, 0xFF	; 255
    111c:	95 83       	std	Z+5, r25	; 0x05
    111e:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
    1120:	17 82       	std	Z+7, r1	; 0x07
    1122:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 1;
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	31 87       	std	Z+9, r19	; 0x09
    112a:	20 87       	std	Z+8, r18	; 0x08
	block[2].y = 0;
    112c:	13 86       	std	Z+11, r1	; 0x0b
    112e:	12 86       	std	Z+10, r1	; 0x0a
	block[3].x = -1;
    1130:	95 87       	std	Z+13, r25	; 0x0d
    1132:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = -1;
    1134:	97 87       	std	Z+15, r25	; 0x0f
    1136:	86 87       	std	Z+14, r24	; 0x0e
    1138:	08 95       	ret

Disassembly of section .text.makeShapeJ2:

0000113a <makeShapeJ2>:
}

void makeShapeJ2(POS block[4])
{
    113a:	fc 01       	movw	r30, r24
	block[1].x = 0;
    113c:	15 82       	std	Z+5, r1	; 0x05
    113e:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = 1;
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	37 83       	std	Z+7, r19	; 0x07
    1146:	26 83       	std	Z+6, r18	; 0x06
	block[2].x = 0;
    1148:	11 86       	std	Z+9, r1	; 0x09
    114a:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -1;
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	9f ef       	ldi	r25, 0xFF	; 255
    1150:	93 87       	std	Z+11, r25	; 0x0b
    1152:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = 1;
    1154:	35 87       	std	Z+13, r19	; 0x0d
    1156:	24 87       	std	Z+12, r18	; 0x0c
	block[3].y = -1;
    1158:	97 87       	std	Z+15, r25	; 0x0f
    115a:	86 87       	std	Z+14, r24	; 0x0e
    115c:	08 95       	ret

Disassembly of section .text.makeShapeJ3:

0000115e <makeShapeJ3>:
}

void makeShapeJ3(POS block[4])
{
    115e:	fc 01       	movw	r30, r24
	block[1].x = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	95 83       	std	Z+5, r25	; 0x05
    1166:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 1;
    1168:	97 83       	std	Z+7, r25	; 0x07
    116a:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 1;
    116c:	91 87       	std	Z+9, r25	; 0x09
    116e:	80 87       	std	Z+8, r24	; 0x08
	block[2].y = 0;
    1170:	13 86       	std	Z+11, r1	; 0x0b
    1172:	12 86       	std	Z+10, r1	; 0x0a
	block[3].x = -1;
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	95 87       	std	Z+13, r25	; 0x0d
    117a:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
    117c:	17 86       	std	Z+15, r1	; 0x0f
    117e:	16 86       	std	Z+14, r1	; 0x0e
    1180:	08 95       	ret

Disassembly of section .text.makeShapeJ4:

00001182 <makeShapeJ4>:
}

void makeShapeJ4(POS block[4])
{
    1182:	fc 01       	movw	r30, r24
	block[1].x = 0;
    1184:	15 82       	std	Z+5, r1	; 0x05
    1186:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	97 83       	std	Z+7, r25	; 0x07
    118e:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 0;
    1190:	11 86       	std	Z+9, r1	; 0x09
    1192:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -1;
    1194:	2f ef       	ldi	r18, 0xFF	; 255
    1196:	3f ef       	ldi	r19, 0xFF	; 255
    1198:	33 87       	std	Z+11, r19	; 0x0b
    119a:	22 87       	std	Z+10, r18	; 0x0a
	block[3].x = -1;
    119c:	35 87       	std	Z+13, r19	; 0x0d
    119e:	24 87       	std	Z+12, r18	; 0x0c
	block[3].y = 1;
    11a0:	97 87       	std	Z+15, r25	; 0x0f
    11a2:	86 87       	std	Z+14, r24	; 0x0e
    11a4:	08 95       	ret

Disassembly of section .text.makeShapeL1:

000011a6 <makeShapeL1>:
}

void makeShapeL1(POS block[4])
{
    11a6:	fc 01       	movw	r30, r24
	
	block[1].x = -1;
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
    11ac:	95 83       	std	Z+5, r25	; 0x05
    11ae:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 0;
    11b0:	17 82       	std	Z+7, r1	; 0x07
    11b2:	16 82       	std	Z+6, r1	; 0x06
	block[2].x = 1;
    11b4:	21 e0       	ldi	r18, 0x01	; 1
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	31 87       	std	Z+9, r19	; 0x09
    11ba:	20 87       	std	Z+8, r18	; 0x08
	block[2].y = 0;
    11bc:	13 86       	std	Z+11, r1	; 0x0b
    11be:	12 86       	std	Z+10, r1	; 0x0a
	block[3].x = 1;
    11c0:	35 87       	std	Z+13, r19	; 0x0d
    11c2:	24 87       	std	Z+12, r18	; 0x0c
	block[3].y = -1;
    11c4:	97 87       	std	Z+15, r25	; 0x0f
    11c6:	86 87       	std	Z+14, r24	; 0x0e
    11c8:	08 95       	ret

Disassembly of section .text.makeShapeL2:

000011ca <makeShapeL2>:
}

void makeShapeL2(POS block[4])
{
    11ca:	fc 01       	movw	r30, r24
	block[1].x = 0;
    11cc:	15 82       	std	Z+5, r1	; 0x05
    11ce:	14 82       	std	Z+4, r1	; 0x04
	block[1].y = -1;
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	97 83       	std	Z+7, r25	; 0x07
    11d6:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 0;
    11d8:	11 86       	std	Z+9, r1	; 0x09
    11da:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	93 87       	std	Z+11, r25	; 0x0b
    11e2:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = 1;
    11e4:	95 87       	std	Z+13, r25	; 0x0d
    11e6:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 1;
    11e8:	97 87       	std	Z+15, r25	; 0x0f
    11ea:	86 87       	std	Z+14, r24	; 0x0e
    11ec:	08 95       	ret

Disassembly of section .text.makeShapeL3:

000011ee <makeShapeL3>:
}

void makeShapeL3(POS block[4])
{
    11ee:	fc 01       	movw	r30, r24
	block[1].x = -1;
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	9f ef       	ldi	r25, 0xFF	; 255
    11f4:	95 83       	std	Z+5, r25	; 0x05
    11f6:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = 1;
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	37 83       	std	Z+7, r19	; 0x07
    11fe:	26 83       	std	Z+6, r18	; 0x06
	block[2].x = 1;
    1200:	31 87       	std	Z+9, r19	; 0x09
    1202:	20 87       	std	Z+8, r18	; 0x08
	block[2].y = 0;
    1204:	13 86       	std	Z+11, r1	; 0x0b
    1206:	12 86       	std	Z+10, r1	; 0x0a
	block[3].x = -1;
    1208:	95 87       	std	Z+13, r25	; 0x0d
    120a:	84 87       	std	Z+12, r24	; 0x0c
	block[3].y = 0;
    120c:	17 86       	std	Z+15, r1	; 0x0f
    120e:	16 86       	std	Z+14, r1	; 0x0e
    1210:	08 95       	ret

Disassembly of section .text.makeShapeL4:

00001212 <makeShapeL4>:
}
void makeShapeL4(POS block[4])
{
    1212:	fc 01       	movw	r30, r24
	block[1].x = -1;
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	95 83       	std	Z+5, r25	; 0x05
    121a:	84 83       	std	Z+4, r24	; 0x04
	block[1].y = -1;
    121c:	97 83       	std	Z+7, r25	; 0x07
    121e:	86 83       	std	Z+6, r24	; 0x06
	block[2].x = 0;
    1220:	11 86       	std	Z+9, r1	; 0x09
    1222:	10 86       	std	Z+8, r1	; 0x08
	block[2].y = -1;
    1224:	93 87       	std	Z+11, r25	; 0x0b
    1226:	82 87       	std	Z+10, r24	; 0x0a
	block[3].x = 0;
    1228:	15 86       	std	Z+13, r1	; 0x0d
    122a:	14 86       	std	Z+12, r1	; 0x0c
	block[3].y = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	97 87       	std	Z+15, r25	; 0x0f
    1232:	86 87       	std	Z+14, r24	; 0x0e
    1234:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000ef2 <__divmodhi4>:
 ef2:	97 fb       	bst	r25, 7
 ef4:	07 2e       	mov	r0, r23
 ef6:	16 f4       	brtc	.+4      	; 0xefc <__divmodhi4+0xa>
 ef8:	00 94       	com	r0
 efa:	07 d0       	rcall	.+14     	; 0xf0a <__divmodhi4_neg1>
 efc:	77 fd       	sbrc	r23, 7
 efe:	09 d0       	rcall	.+18     	; 0xf12 <__divmodhi4_neg2>
 f00:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__udivmodhi4>
 f04:	07 fc       	sbrc	r0, 7
 f06:	05 d0       	rcall	.+10     	; 0xf12 <__divmodhi4_neg2>
 f08:	3e f4       	brtc	.+14     	; 0xf18 <__divmodhi4_exit>

00000f0a <__divmodhi4_neg1>:
 f0a:	90 95       	com	r25
 f0c:	81 95       	neg	r24
 f0e:	9f 4f       	sbci	r25, 0xFF	; 255
 f10:	08 95       	ret

00000f12 <__divmodhi4_neg2>:
 f12:	70 95       	com	r23
 f14:	61 95       	neg	r22
 f16:	7f 4f       	sbci	r23, 0xFF	; 255

00000f18 <__divmodhi4_exit>:
 f18:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000f1a <__udivmodhi4>:
 f1a:	aa 1b       	sub	r26, r26
 f1c:	bb 1b       	sub	r27, r27
 f1e:	51 e1       	ldi	r21, 0x11	; 17
 f20:	07 c0       	rjmp	.+14     	; 0xf30 <__udivmodhi4_ep>

00000f22 <__udivmodhi4_loop>:
 f22:	aa 1f       	adc	r26, r26
 f24:	bb 1f       	adc	r27, r27
 f26:	a6 17       	cp	r26, r22
 f28:	b7 07       	cpc	r27, r23
 f2a:	10 f0       	brcs	.+4      	; 0xf30 <__udivmodhi4_ep>
 f2c:	a6 1b       	sub	r26, r22
 f2e:	b7 0b       	sbc	r27, r23

00000f30 <__udivmodhi4_ep>:
 f30:	88 1f       	adc	r24, r24
 f32:	99 1f       	adc	r25, r25
 f34:	5a 95       	dec	r21
 f36:	a9 f7       	brne	.-22     	; 0xf22 <__udivmodhi4_loop>
 f38:	80 95       	com	r24
 f3a:	90 95       	com	r25
 f3c:	bc 01       	movw	r22, r24
 f3e:	cd 01       	movw	r24, r26
 f40:	08 95       	ret

Disassembly of section .text.avrlibc:

00000846 <do_rand>:
 846:	8f 92       	push	r8
 848:	9f 92       	push	r9
 84a:	af 92       	push	r10
 84c:	bf 92       	push	r11
 84e:	cf 92       	push	r12
 850:	df 92       	push	r13
 852:	ef 92       	push	r14
 854:	ff 92       	push	r15
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	ec 01       	movw	r28, r24
 85c:	68 81       	ld	r22, Y
 85e:	79 81       	ldd	r23, Y+1	; 0x01
 860:	8a 81       	ldd	r24, Y+2	; 0x02
 862:	9b 81       	ldd	r25, Y+3	; 0x03
 864:	61 15       	cp	r22, r1
 866:	71 05       	cpc	r23, r1
 868:	81 05       	cpc	r24, r1
 86a:	91 05       	cpc	r25, r1
 86c:	21 f4       	brne	.+8      	; 0x876 <do_rand+0x30>
 86e:	64 e2       	ldi	r22, 0x24	; 36
 870:	79 ed       	ldi	r23, 0xD9	; 217
 872:	8b e5       	ldi	r24, 0x5B	; 91
 874:	97 e0       	ldi	r25, 0x07	; 7
 876:	2d e1       	ldi	r18, 0x1D	; 29
 878:	33 ef       	ldi	r19, 0xF3	; 243
 87a:	41 e0       	ldi	r20, 0x01	; 1
 87c:	50 e0       	ldi	r21, 0x00	; 0
 87e:	0e 94 d6 06 	call	0xdac	; 0xdac <__divmodsi4>
 882:	49 01       	movw	r8, r18
 884:	5a 01       	movw	r10, r20
 886:	9b 01       	movw	r18, r22
 888:	ac 01       	movw	r20, r24
 88a:	a7 ea       	ldi	r26, 0xA7	; 167
 88c:	b1 e4       	ldi	r27, 0x41	; 65
 88e:	0e 94 39 09 	call	0x1272	; 0x1272 <__muluhisi3>
 892:	6b 01       	movw	r12, r22
 894:	7c 01       	movw	r14, r24
 896:	ac ee       	ldi	r26, 0xEC	; 236
 898:	b4 ef       	ldi	r27, 0xF4	; 244
 89a:	a5 01       	movw	r20, r10
 89c:	94 01       	movw	r18, r8
 89e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__mulohisi3>
 8a2:	dc 01       	movw	r26, r24
 8a4:	cb 01       	movw	r24, r22
 8a6:	8c 0d       	add	r24, r12
 8a8:	9d 1d       	adc	r25, r13
 8aa:	ae 1d       	adc	r26, r14
 8ac:	bf 1d       	adc	r27, r15
 8ae:	b7 ff       	sbrs	r27, 7
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <do_rand+0x72>
 8b2:	01 97       	sbiw	r24, 0x01	; 1
 8b4:	a1 09       	sbc	r26, r1
 8b6:	b0 48       	sbci	r27, 0x80	; 128
 8b8:	88 83       	st	Y, r24
 8ba:	99 83       	std	Y+1, r25	; 0x01
 8bc:	aa 83       	std	Y+2, r26	; 0x02
 8be:	bb 83       	std	Y+3, r27	; 0x03
 8c0:	9f 77       	andi	r25, 0x7F	; 127
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	ff 90       	pop	r15
 8c8:	ef 90       	pop	r14
 8ca:	df 90       	pop	r13
 8cc:	cf 90       	pop	r12
 8ce:	bf 90       	pop	r11
 8d0:	af 90       	pop	r10
 8d2:	9f 90       	pop	r9
 8d4:	8f 90       	pop	r8
 8d6:	08 95       	ret

000008d8 <rand_r>:
 8d8:	0c 94 23 04 	jmp	0x846	; 0x846 <do_rand>

000008dc <rand>:
 8dc:	8a e4       	ldi	r24, 0x4A	; 74
 8de:	93 e0       	ldi	r25, 0x03	; 3
 8e0:	0c 94 23 04 	jmp	0x846	; 0x846 <do_rand>

000008e4 <srand>:
 8e4:	a0 e0       	ldi	r26, 0x00	; 0
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	ea e4       	ldi	r30, 0x4A	; 74
 8ea:	f3 e0       	ldi	r31, 0x03	; 3
 8ec:	80 83       	st	Z, r24
 8ee:	91 83       	std	Z+1, r25	; 0x01
 8f0:	a2 83       	std	Z+2, r26	; 0x02
 8f2:	b3 83       	std	Z+3, r27	; 0x03
 8f4:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000dac <__divmodsi4>:
 dac:	05 2e       	mov	r0, r21
 dae:	97 fb       	bst	r25, 7
 db0:	1e f4       	brtc	.+6      	; 0xdb8 <__divmodsi4+0xc>
 db2:	00 94       	com	r0
 db4:	0e 94 56 09 	call	0x12ac	; 0x12ac <__negsi2>
 db8:	57 fd       	sbrc	r21, 7
 dba:	07 d0       	rcall	.+14     	; 0xdca <__divmodsi4_neg2>
 dbc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__udivmodsi4>
 dc0:	07 fc       	sbrc	r0, 7
 dc2:	03 d0       	rcall	.+6      	; 0xdca <__divmodsi4_neg2>
 dc4:	4e f4       	brtc	.+18     	; 0xdd8 <__divmodsi4_exit>
 dc6:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__negsi2>

00000dca <__divmodsi4_neg2>:
 dca:	50 95       	com	r21
 dcc:	40 95       	com	r20
 dce:	30 95       	com	r19
 dd0:	21 95       	neg	r18
 dd2:	3f 4f       	sbci	r19, 0xFF	; 255
 dd4:	4f 4f       	sbci	r20, 0xFF	; 255
 dd6:	5f 4f       	sbci	r21, 0xFF	; 255

00000dd8 <__divmodsi4_exit>:
 dd8:	08 95       	ret

Disassembly of section .text.libgcc.div:

000012ac <__negsi2>:
    12ac:	90 95       	com	r25
    12ae:	80 95       	com	r24
    12b0:	70 95       	com	r23
    12b2:	61 95       	neg	r22
    12b4:	7f 4f       	sbci	r23, 0xFF	; 255
    12b6:	8f 4f       	sbci	r24, 0xFF	; 255
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00001272 <__muluhisi3>:
    1272:	0e 94 2a 09 	call	0x1254	; 0x1254 <__umulhisi3>
    1276:	a5 9f       	mul	r26, r21
    1278:	90 0d       	add	r25, r0
    127a:	b4 9f       	mul	r27, r20
    127c:	90 0d       	add	r25, r0
    127e:	a4 9f       	mul	r26, r20
    1280:	80 0d       	add	r24, r0
    1282:	91 1d       	adc	r25, r1
    1284:	11 24       	eor	r1, r1
    1286:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000012bc <__mulshisi3>:
    12bc:	b7 ff       	sbrs	r27, 7
    12be:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__muluhisi3>

000012c2 <__mulohisi3>:
    12c2:	0e 94 39 09 	call	0x1272	; 0x1272 <__muluhisi3>
    12c6:	82 1b       	sub	r24, r18
    12c8:	93 0b       	sbc	r25, r19
    12ca:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000cfc <__udivmodsi4>:
 cfc:	a1 e2       	ldi	r26, 0x21	; 33
 cfe:	1a 2e       	mov	r1, r26
 d00:	aa 1b       	sub	r26, r26
 d02:	bb 1b       	sub	r27, r27
 d04:	fd 01       	movw	r30, r26
 d06:	0d c0       	rjmp	.+26     	; 0xd22 <__udivmodsi4_ep>

00000d08 <__udivmodsi4_loop>:
 d08:	aa 1f       	adc	r26, r26
 d0a:	bb 1f       	adc	r27, r27
 d0c:	ee 1f       	adc	r30, r30
 d0e:	ff 1f       	adc	r31, r31
 d10:	a2 17       	cp	r26, r18
 d12:	b3 07       	cpc	r27, r19
 d14:	e4 07       	cpc	r30, r20
 d16:	f5 07       	cpc	r31, r21
 d18:	20 f0       	brcs	.+8      	; 0xd22 <__udivmodsi4_ep>
 d1a:	a2 1b       	sub	r26, r18
 d1c:	b3 0b       	sbc	r27, r19
 d1e:	e4 0b       	sbc	r30, r20
 d20:	f5 0b       	sbc	r31, r21

00000d22 <__udivmodsi4_ep>:
 d22:	66 1f       	adc	r22, r22
 d24:	77 1f       	adc	r23, r23
 d26:	88 1f       	adc	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	1a 94       	dec	r1
 d2c:	69 f7       	brne	.-38     	; 0xd08 <__udivmodsi4_loop>
 d2e:	60 95       	com	r22
 d30:	70 95       	com	r23
 d32:	80 95       	com	r24
 d34:	90 95       	com	r25
 d36:	9b 01       	movw	r18, r22
 d38:	ac 01       	movw	r20, r24
 d3a:	bd 01       	movw	r22, r26
 d3c:	cf 01       	movw	r24, r30
 d3e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00001254 <__umulhisi3>:
    1254:	a2 9f       	mul	r26, r18
    1256:	b0 01       	movw	r22, r0
    1258:	b3 9f       	mul	r27, r19
    125a:	c0 01       	movw	r24, r0
    125c:	a3 9f       	mul	r26, r19
    125e:	70 0d       	add	r23, r0
    1260:	81 1d       	adc	r24, r1
    1262:	11 24       	eor	r1, r1
    1264:	91 1d       	adc	r25, r1
    1266:	b2 9f       	mul	r27, r18
    1268:	70 0d       	add	r23, r0
    126a:	81 1d       	adc	r24, r1
    126c:	11 24       	eor	r1, r1
    126e:	91 1d       	adc	r25, r1
    1270:	08 95       	ret
